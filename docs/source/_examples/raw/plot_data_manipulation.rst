
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples/raw/plot_data_manipulation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_raw_plot_data_manipulation.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_raw_plot_data_manipulation.py:


Data manipulation
====================

.. note:: This is a copy of the jupyter notebook with the
          following name: Data_manipulation_ECG_PPG.ipynb.
          The other option is to use the sphinx extension
          sphinx-nbexamples.

.. GENERATED FROM PYTHON SOURCE LINES 13-28

.. code-block:: default
   :lineno-start: 14


    from vital_sqi.data.signal_io import ECG_reader,PPG_reader
    import os
    file_name = os.path.abspath('../../tests/test_data/example.edf')
    ecg_data = ECG_reader(file_name, 'edf')
    # ecg_data = load_ecg()
    file_name = os.path.abspath('../../tests/test_data/ppg_smartcare.csv')
    ppg_data = PPG_reader(file_name,
                        signal_idx=['PLETH'],
                        timestamp_idx=['TIMESTAMP_MS'],
                        info_idx=['PULSE_BPM', 'SPO2_PCT', 'PERFUSION_INDEX'],
                        sampling_rate=100,
                        start_datetime='2020/12/30 10:00:00')
    # ppg_data = load_ppg()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Reading Channels:   0%|          | 0/2 [00:00<?, ?it/s]    Reading Channels: 100%|##########| 2/2 [00:00<00:00, 36.32it/s]




.. GENERATED FROM PYTHON SOURCE LINES 29-33

.. code-block:: default
   :lineno-start: 30


    all_channels = ecg_data.signals
    channel_1 = all_channels.iloc[:, 1]








.. GENERATED FROM PYTHON SOURCE LINES 34-37

.. code-block:: default
   :lineno-start: 35


    ### Example of splitting the whole data into subsegment using time domain for ECG.








.. GENERATED FROM PYTHON SOURCE LINES 38-42

.. code-block:: default
   :lineno-start: 39


    import numpy as np
    import matplotlib.pyplot as plt








.. GENERATED FROM PYTHON SOURCE LINES 43-46

.. code-block:: default
   :lineno-start: 44


    print(len(channel_1))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    265536




.. GENERATED FROM PYTHON SOURCE LINES 47-50

.. code-block:: default
   :lineno-start: 48


    #The whole channel length will be splitted into each 30-second segment








.. GENERATED FROM PYTHON SOURCE LINES 51-54

.. code-block:: default
   :lineno-start: 52


    from vital_sqi.preprocess.segment_split import split_segment








.. GENERATED FROM PYTHON SOURCE LINES 55-66

.. code-block:: default
   :lineno-start: 56


    save_file_name = "example_file"
    save_file_folder = "subsegments_time"
    split_segment(channel_1,
                      filename=None,
                      sampling_rate=256,
                      segment_length_second=10.0,
                      wave_type=ecg_data.wave_type,
                      split_type="time",
                      save_file_folder=save_file_folder)



.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "/Users/haihb/Documents/Oucru/innovation/vital_sqi/examples/raw/plot_data_manipulation.py", line 64, in <module>
        save_file_folder=save_file_folder)
    TypeError: split_segment() got an unexpected keyword argument 'filename'




.. GENERATED FROM PYTHON SOURCE LINES 67-72

.. code-block:: default
   :lineno-start: 68


    #The function requires the sampling rate and the defined length (in seconds) of the split segment to calculate the cutting points. User also defined a location to save the output of cut files**

    #The split_to_subsegments output the saved segment at the defined save folder. Save files takes the format of "[file_name]-[segment_number].csv"


.. GENERATED FROM PYTHON SOURCE LINES 73-76

.. code-block:: default
   :lineno-start: 74


    print(os.listdir("subsegments_time/ecg/"))


.. GENERATED FROM PYTHON SOURCE LINES 77-81

.. code-block:: default
   :lineno-start: 78


    segment_51 = np.loadtxt("subsegments_time/ecg/segment-051.csv")
    segment_52 = np.loadtxt("subsegments_time/ecg/segment-052.csv")


.. GENERATED FROM PYTHON SOURCE LINES 82-103

.. code-block:: default
   :lineno-start: 83


    #Uncomment the plotly code to use interactive plot

    # fig = go.Figure()
    # fig.add_trace(go.Scatter(x=np.arange(len(segment_51)),
    #                          y= segment_51,
    #                          name='segment 51'))
    # fig.add_trace(go.Scatter(x=np.arange(len(segment_51),
    #                                      len(segment_51)+len(segment_52)),
    #                          y= segment_52,
    #                          name='segment 52'))
    # fig.show()


    fig = plt.Figure()
    plt.plot(np.arange(len(segment_51)),
             segment_51)
    plt.plot(np.arange(len(segment_51),len(segment_51)+len(segment_52)),
             segment_52)
    plt.show()


.. GENERATED FROM PYTHON SOURCE LINES 104-107

.. code-block:: default
   :lineno-start: 105


    ### Example of splitting the whole data into subsegment using time domain for PPG.


.. GENERATED FROM PYTHON SOURCE LINES 108-121

.. code-block:: default
   :lineno-start: 109


    save_file_name = "example_file"
    save_file_folder = "subsegments_time"
    if not os.path.exists(save_file_folder):
        os.makedirs(save_file_folder)
    split_to_segments(ppg_data.signals.iloc[:, 1],
                      filename=None,
                      sampling_rate=100,
                      segment_length_second=10.0,
                      wave_type=ppg_data.wave_type,
                      split_type="time",
                      save_file_folder=save_file_folder)


.. GENERATED FROM PYTHON SOURCE LINES 122-126

.. code-block:: default
   :lineno-start: 122

    ppg_folder = os.path.join(save_file_folder, "ppg")
    file_list = os.listdir(ppg_folder)
    print(file_list)


.. GENERATED FROM PYTHON SOURCE LINES 127-130

.. code-block:: default
   :lineno-start: 127

    segment_1 = np.loadtxt(os.path.join(ppg_folder, file_list[0]))
    segment_2 = np.loadtxt(os.path.join(ppg_folder, file_list[0]))


.. GENERATED FROM PYTHON SOURCE LINES 131-150

.. code-block:: default
   :lineno-start: 132


    # Uncomment the plotly code to use interactive plot
    # fig = go.Figure()
    # fig.add_trace(go.Scatter(x=np.arange(len(segment_1)),
    #                          y= segment_1,
    #                          name='segment 1'))
    # fig.add_trace(go.Scatter(x=np.arange(len(segment_1),
    #                                      len(segment_1)+len(segment_2)),
    #                          y= segment_2,
    #                          name='segment 2'))
    # fig.show()

    fig = plt.Figure()
    plt.plot(np.arange(len(segment_1)),
             segment_1)
    plt.plot(np.arange(len(segment_1),len(segment_1)+len(segment_2)),
             segment_2)
    plt.show()


.. GENERATED FROM PYTHON SOURCE LINES 151-156

.. code-block:: default
   :lineno-start: 152


    ### Example of splitting the whole data into subsegment using frequency domian for ECG.

    ### Notes on the difference of splitting point as comparing with time domain splitting. Uncomment the plotly code - interactive plot - for better observation


.. GENERATED FROM PYTHON SOURCE LINES 157-167

.. code-block:: default
   :lineno-start: 158


    save_file_name = "example_file"
    save_file_folder = "subsegments_frequency"
    split_to_segments(channel_1,
                      filename=None,
                      sampling_rate=256,
                      segment_length_second=10.0,
                      split_type="peak_interval",
                      save_file_folder=save_file_folder)


.. GENERATED FROM PYTHON SOURCE LINES 168-172

.. code-block:: default
   :lineno-start: 169


    segment_51 = np.loadtxt("subsegments_frequency/ecg/segment-051.csv")
    segment_52 = np.loadtxt("subsegments_frequency/ecg/segment-052.csv")


.. GENERATED FROM PYTHON SOURCE LINES 173-192

.. code-block:: default
   :lineno-start: 174


    # Uncomment the plotly code to use interactive plot
    # fig = go.Figure()
    # fig.add_trace(go.Scatter(x=np.arange(len(segment_51)),
    #                          y= segment_51,
    #                          name='segment 51'))
    # fig.add_trace(go.Scatter(x=np.arange(len(segment_51),
    #                                      len(segment_51)+len(segment_52)),
    #                          y= segment_52,
    #                          name='segment 52'))
    # fig.show()

    fig = plt.Figure()
    plt.plot(np.arange(len(segment_51)),
             segment_51)
    plt.plot(np.arange(len(segment_51),len(segment_51)+len(segment_52)),
             segment_52)
    plt.show()


.. GENERATED FROM PYTHON SOURCE LINES 193-196

.. code-block:: default
   :lineno-start: 194


    ### Example of splitting the whole data into subsegment using frequency domian for PPG.


.. GENERATED FROM PYTHON SOURCE LINES 197-208

.. code-block:: default
   :lineno-start: 198


    save_file_name = "example_file"
    save_file_folder = "subsegments_frequency"
    split_to_segments(ppg_data.signals.iloc[:, 0],
                      filename=None,
                      sampling_rate=256,
                      segment_length_second=10.0,
                      wave_type=ppg_data.wave_type,
                      split_type="peak_interval",
                      save_file_folder=save_file_folder)


.. GENERATED FROM PYTHON SOURCE LINES 209-213

.. code-block:: default
   :lineno-start: 210


    segment_1 = np.loadtxt("subsegments_frequency/ppg/segment-01.csv")
    segment_2 = np.loadtxt("subsegments_frequency/ppg/segment-02.csv")


.. GENERATED FROM PYTHON SOURCE LINES 214-233

.. code-block:: default
   :lineno-start: 215


    # Uncomment to use interactive plot
    # fig = go.Figure()
    # fig.add_trace(go.Scatter(x=np.arange(len(segment_1)),
    #                          y= segment_1,
    #                          name='segment 1'))
    # fig.add_trace(go.Scatter(x=np.arange(len(segment_1),
    #                                      len(segment_1)+len(segment_2)),
    #                          y= segment_2,
    #                          name='segment 2'))
    # fig.show()

    fig = plt.Figure()
    plt.plot(np.arange(len(segment_1)),
             segment_1)
    plt.plot(np.arange(len(segment_1),len(segment_1)+len(segment_2)),
             segment_2)
    plt.show()


.. GENERATED FROM PYTHON SOURCE LINES 234-237

.. code-block:: default
   :lineno-start: 235


    ### Example of trimming the first and the last n-minute data.


.. GENERATED FROM PYTHON SOURCE LINES 238-241

.. code-block:: default
   :lineno-start: 239


    from vital_sqi.data import trim_data


.. GENERATED FROM PYTHON SOURCE LINES 242-245

.. code-block:: default
   :lineno-start: 243


    trimmed_data = trim_data(channel_1,minute_remove=10)


.. GENERATED FROM PYTHON SOURCE LINES 246-249

.. code-block:: default
   :lineno-start: 247


    trimmed_data


.. GENERATED FROM PYTHON SOURCE LINES 250-271

.. code-block:: default
   :lineno-start: 251


    # fig = go.Figure()
    # fig.add_trace(go.Scatter(x=np.arange(len(channel_1)),
    #                          y= channel_1,
    #                          name='full data'))
    # fig.show()

    # fig = go.Figure()
    # fig.add_trace(go.Scatter(x=np.arange(len(trimmed_data)),
    #                          y= trimmed_data,
    #                          name='trimmed data'))
    # fig.show()

    fig = plt.Figure()
    plt.plot(np.arange(len(channel_1)),
             channel_1)
    plt.show()
    plt.plot(np.arange(len(trimmed_data)),
             trimmed_data, color=u'#ff7f0e')
    plt.show()


.. GENERATED FROM PYTHON SOURCE LINES 272-275

.. code-block:: default
   :lineno-start: 273


    #The before and after trimming 5 minutes segment**


.. GENERATED FROM PYTHON SOURCE LINES 276-279

.. code-block:: default
   :lineno-start: 277


    trimmed_data_ppg = trim_data(ppg_data.signals.iloc[:, 1], minute_remove=1)


.. GENERATED FROM PYTHON SOURCE LINES 280-302

.. code-block:: default
   :lineno-start: 281


    # fig = go.Figure()
    # fig.add_trace(go.Scatter(x=np.arange(len(ppg_data.signals)),
    #                          y= ppg_data.signals,
    #                          name='full data'))
    # fig.show()

    # fig = go.Figure()
    # fig.add_trace(go.Scatter(x=np.arange(len(trimmed_data_ppg)),
    #                          y= trimmed_data_ppg,
    #                          name='trimmed data'))
    # fig.show()

    fig = plt.Figure()
    plt.plot(np.arange(len(ppg_data.signals.iloc[:, 1])),
             ppg_data.signals.iloc[:, 1])
    plt.show()
    plt.plot(np.arange(len(trimmed_data_ppg)),
             trimmed_data_ppg,
             color=u'#ff7f0e')
    plt.show()


.. GENERATED FROM PYTHON SOURCE LINES 303-306

.. code-block:: default
   :lineno-start: 304


    ### Example of before and after removing the unchanged value of the n-continuous second.


.. GENERATED FROM PYTHON SOURCE LINES 307-310

.. code-block:: default
   :lineno-start: 308


    from vital_sqi.data.removal_utilities import remove_unchanged_squences


.. GENERATED FROM PYTHON SOURCE LINES 311-318

.. code-block:: default
   :lineno-start: 312


    # create a series of unchanged value in the trimmed_data list
    idx = np.random.randint(int(len(trimmed_data)/2))
    sampling_rate = 256
    unchanged_data = trimmed_data.copy()
    unchanged_data[idx:idx+sampling_rate*20] = max(trimmed_data)


.. GENERATED FROM PYTHON SOURCE LINES 319-331

.. code-block:: default
   :lineno-start: 320


    # fig = go.Figure()
    # fig.add_trace(go.Scatter(x=np.arange(len(unchanged_data)),
    #                          y= unchanged_data,
    #                          name='trimmed data'))
    # fig.show()

    fig = plt.Figure()
    plt.plot(np.arange(len(unchanged_data)),
             unchanged_data)
    plt.show()


.. GENERATED FROM PYTHON SOURCE LINES 332-339

.. code-block:: default
   :lineno-start: 333


    start_list, end_list = \
        remove_unchanged_squences(unchanged_data,
                                  unchanged_seconds=10,
                                  sampling_rate=256,
                                  as_dataframe=False)


.. GENERATED FROM PYTHON SOURCE LINES 340-354

.. code-block:: default
   :lineno-start: 341


    # fig = go.Figure()
    # for start,end in zip(start_list,end_list):
    #     fig.add_trace(go.Scatter(x=np.arange(start,end),
    #                              y= unchanged_data[start:end],
    #                              name='trimmed data'))
    # fig.show()

    fig = plt.Figure()
    for start, end in zip(start_list, end_list):
        plt.plot(np.arange(start, end),
             unchanged_data[start:end])
    plt.show()


.. GENERATED FROM PYTHON SOURCE LINES 355-358

.. code-block:: default
   :lineno-start: 356


    ### Example of removing invalid signal data (signal = 0 and other vital signs exceed the normal range)


.. GENERATED FROM PYTHON SOURCE LINES 359-362

.. code-block:: default
   :lineno-start: 360


    from vital_sqi.data import remove_invalid


.. GENERATED FROM PYTHON SOURCE LINES 363-367

.. code-block:: default
   :lineno-start: 364


    trimmed_data = trim_data(channel_1, minute_remove=10)
    error_data = trimmed_data.copy()


.. GENERATED FROM PYTHON SOURCE LINES 368-374

.. code-block:: default
   :lineno-start: 369


    # create a series of unchanged value in the trimmed_data list
    idx = np.random.randint(int(len(error_data)/2))
    sampling_rate = 256
    error_data[idx:idx+sampling_rate*20] = 0


.. GENERATED FROM PYTHON SOURCE LINES 375-378

.. code-block:: default
   :lineno-start: 376


    start_list, end_list = remove_invalid(error_data,as_dataframe=False)


.. GENERATED FROM PYTHON SOURCE LINES 379-392

.. code-block:: default
   :lineno-start: 380


    # fig = go.Figure()
    # for start,end in zip(start_list,end_list):
    #     fig.add_trace(go.Scatter(x= np.arange(start,end),
    #                              y= trimmed_data[start:end],
    #                              name='trimmed data'))
    # fig.show()
    fig = plt.Figure()
    for start,end in zip(start_list,end_list):
        plt.plot(np.arange(start,end),
             trimmed_data[start:end])
    plt.show()


.. GENERATED FROM PYTHON SOURCE LINES 393-396

.. code-block:: default
   :lineno-start: 394


    ### One example of removing invalid signal data using the frequency domain


.. GENERATED FROM PYTHON SOURCE LINES 397-400

.. code-block:: default
   :lineno-start: 398


    from vital_sqi.data import cut_by_frequency_partition


.. GENERATED FROM PYTHON SOURCE LINES 401-408

.. code-block:: default
   :lineno-start: 402


    start_list, end_list = \
        cut_by_frequency_partition(trimmed_data,
                                  window_size=30000,
                                  peak_threshold_ratio=4,
                                  lower_bound_threshold=2)


.. GENERATED FROM PYTHON SOURCE LINES 409-415

.. code-block:: default
   :lineno-start: 410


    #Welch method is applied for the whole data to obtain the common frequency component.**

    #*After that, a scanning window with the size of 3000 samples is computed for each subsegment to analyse its frequency component.**
    #Any windows having its component exceeds the peak_threshold_ratio (the ratio between the number of subsegment's components and the number of whole data components) will be removed.**


.. GENERATED FROM PYTHON SOURCE LINES 416-436

.. code-block:: default
   :lineno-start: 417


    # fig = go.Figure()
    # for start,end in zip(start_list,end_list):
    #     fig.add_trace(go.Scatter(x= np.arange(start,end),
    #                              y= trimmed_data[start:end],
    #                              name='trimmed data'))
    # fig.show()

    fig = plt.Figure()
    plt.plot(np.arange(len(trimmed_data)),
             trimmed_data)
    plt.show()


    fig = plt.Figure()
    for start,end in zip(start_list,end_list):
        plt.plot(np.arange(start,end),
             trimmed_data[start:end])
    plt.show()


.. GENERATED FROM PYTHON SOURCE LINES 437-442

.. code-block:: default
   :lineno-start: 438


    out = PPG_reader(os.path.join(os.getcwd(),'../../', 'tests/test_data/ppg_smartcare.csv'),
                     timestamp_idx = ['TIMESTAMP_MS'], signal_idx = ['PLETH'],
                     info_idx = ['PULSE_BPM','SPO2_PCT','PERFUSION_INDEX'])


.. GENERATED FROM PYTHON SOURCE LINES 443-450

.. code-block:: default
   :lineno-start: 444


    start_list, end_list = \
        cut_by_frequency_partition(ppg_data.signals.iloc[:, 1],
                                  window_size=30000,
                                  peak_threshold_ratio=2,
                                  lower_bound_threshold=2)


.. GENERATED FROM PYTHON SOURCE LINES 451-469

.. code-block:: default
   :lineno-start: 452


    # fig = go.Figure()
    # for start,end in zip(start_list,end_list):
    #     fig.add_trace(go.Scatter(x= np.arange(start,end),
    #                              y= ppg_data.signals[start:end],
    #                              name='trimmed data'))
    # fig.show()
    fig = plt.Figure()
    plt.plot(np.arange(len(ppg_data.signals.iloc[:, 1])),
             ppg_data.signals.iloc[:, 1])
    plt.show()

    # .. note gives an error
    #fig = plt.Figure()
    #for start,end in zip(start_list,end_list):
    #    plt.plot(np.arange(start,end),
    #         ppg_data.signals[start:end])
    #plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.434 seconds)


.. _sphx_glr_download__examples_raw_plot_data_manipulation.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_data_manipulation.py <plot_data_manipulation.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_data_manipulation.ipynb <plot_data_manipulation.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
