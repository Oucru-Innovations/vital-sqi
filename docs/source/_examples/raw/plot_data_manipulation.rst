
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples/raw/plot_data_manipulation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_raw_plot_data_manipulation.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_raw_plot_data_manipulation.py:


Data manipulation
====================

.. note:: This is a copy of the jupyter notebook with the
          following name: Data_manipulation_ECG_PPG.ipynb.
          The other option is to use the sphinx extension
          sphinx-nbexamples.

.. GENERATED FROM PYTHON SOURCE LINES 13-30

.. code-block:: default
   :lineno-start: 14


    import vital_sqi
    from vital_sqi.data.signal_io import ECG_reader,PPG_reader
    from vital_sqi.dataset import load_ppg,load_ecg
    import os
    file_name = os.path.abspath('../../tests/test_data/example.edf')
    ecg_data = ECG_reader(file_name, 'edf')
    # ecg_data = load_ecg()
    file_name = os.path.abspath('../../tests/test_data/ppg_smartcare.csv')
    ppg_data = PPG_reader(file_name,
                        signal_idx=['PLETH'],
                        timestamp_idx=['TIMESTAMP_MS'],
                        info_idx=['PULSE_BPM', 'SPO2_PCT', 'PERFUSION_INDEX'],
                        sampling_rate=100,
                        start_datetime='2020/12/30 10:00:00')
    # ppg_data = load_ppg()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Importing the dtw module. When using in academic works please cite:
      T. Giorgino. Computing and Visualizing Dynamic Time Warping Alignments in R: The dtw Package.
      J. Stat. Soft., doi:10.18637/jss.v031.i07.

    Reading Channels:   0%|          | 0/2 [00:00<?, ?it/s]    Reading Channels: 100%|##########| 2/2 [00:00<00:00, 34.59it/s]




.. GENERATED FROM PYTHON SOURCE LINES 31-35

.. code-block:: default
   :lineno-start: 32


    all_channels = ecg_data.signals
    channel_1 = all_channels.iloc[:, 1]








.. GENERATED FROM PYTHON SOURCE LINES 36-39

.. code-block:: default
   :lineno-start: 37


    ### Example of splitting the whole data into subsegment using time domain for ECG.








.. GENERATED FROM PYTHON SOURCE LINES 40-45

.. code-block:: default
   :lineno-start: 41


    import plotly.graph_objects as go
    import numpy as np
    import matplotlib.pyplot as plt








.. GENERATED FROM PYTHON SOURCE LINES 46-49

.. code-block:: default
   :lineno-start: 47


    print(len(channel_1))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    265536




.. GENERATED FROM PYTHON SOURCE LINES 50-53

.. code-block:: default
   :lineno-start: 51


    #The whole channel length will be splitted into each 30-second segment








.. GENERATED FROM PYTHON SOURCE LINES 54-57

.. code-block:: default
   :lineno-start: 55


    from vital_sqi.data.segment_split import split_to_segments








.. GENERATED FROM PYTHON SOURCE LINES 58-69

.. code-block:: default
   :lineno-start: 59


    save_file_name = "example_file"
    save_file_folder = "subsegments_time"
    split_to_segments(channel_1,
                      filename=None,
                      sampling_rate=256,
                      segment_length_second=10.0,
                      wave_type=ecg_data.wave_type,
                      split_type="time",
                      save_file_folder=save_file_folder)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/103 [00:00<?, ?it/s]     18%|#8        | 19/103 [00:00<00:00, 186.96it/s]     37%|###6      | 38/103 [00:00<00:00, 187.93it/s]     56%|#####6    | 58/103 [00:00<00:00, 191.71it/s]     76%|#######5  | 78/103 [00:00<00:00, 192.77it/s]     95%|#########5| 98/103 [00:00<00:00, 194.30it/s]    100%|##########| 103/103 [00:00<00:00, 192.81it/s]




.. GENERATED FROM PYTHON SOURCE LINES 70-75

.. code-block:: default
   :lineno-start: 71


    #The function requires the sampling rate and the defined length (in seconds) of the split segment to calculate the cutting points. User also defined a location to save the output of cut files**

    #The split_to_subsegments output the saved segment at the defined save folder. Save files takes the format of "[file_name]-[segment_number].csv"








.. GENERATED FROM PYTHON SOURCE LINES 76-79

.. code-block:: default
   :lineno-start: 77


    print(os.listdir("subsegments_time/ecg/"))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ['segment-017.csv', 'segment-003.csv', 'segment-002.csv', 'segment-016.csv', 'segment-014.csv', 'segment-028.csv', 'segment-029.csv', 'segment-015.csv', 'segment-001.csv', 'segment-039.csv', 'segment-005.csv', 'segment-011.csv', 'segment-010.csv', 'segment-004.csv', 'segment-038.csv', 'segment-012.csv', 'segment-006.csv', 'segment-007.csv', 'segment-013.csv', 'segment-100.csv', 'segment-074.csv', 'segment-060.csv', 'segment-048.csv', 'segment-049.csv', 'segment-061.csv', 'segment-075.csv', 'segment-101.csv', 'segment-103.csv', 'segment-088.csv', 'segment-063.csv', 'segment-077.csv', 'segment-076.csv', 'segment-062.csv', 'segment-089.csv', 'segment-102.csv', 'segment-099.csv', 'segment-066.csv', 'segment-072.csv', 'segment-073.csv', 'segment-067.csv', 'segment-098.csv', 'segment-059.csv', 'segment-071.csv', 'segment-065.csv', 'segment-064.csv', 'segment-070.csv', 'segment-058.csv', 'segment-096.csv', 'segment-082.csv', 'segment-055.csv', 'segment-041.csv', 'segment-069.csv', 'segment-068.csv', 'segment-040.csv', 'segment-054.csv', 'segment-083.csv', 'segment-097.csv', 'segment-081.csv', 'segment-095.csv', 'segment-042.csv', 'segment-056.csv', 'segment-057.csv', 'segment-043.csv', 'segment-094.csv', 'segment-080.csv', 'segment-084.csv', 'segment-090.csv', 'segment-047.csv', 'segment-053.csv', 'segment-052.csv', 'segment-046.csv', 'segment-091.csv', 'segment-085.csv', 'segment-093.csv', 'segment-087.csv', 'segment-078.csv', 'segment-050.csv', 'segment-044.csv', 'segment-045.csv', 'segment-051.csv', 'segment-079.csv', 'segment-086.csv', 'segment-092.csv', 'segment-036.csv', 'segment-022.csv', 'segment-023.csv', 'segment-037.csv', 'segment-021.csv', 'segment-035.csv', 'segment-009.csv', 'segment-008.csv', 'segment-034.csv', 'segment-020.csv', 'segment-018.csv', 'segment-024.csv', 'segment-030.csv', 'segment-031.csv', 'segment-025.csv', 'segment-019.csv', 'segment-033.csv', 'segment-027.csv', 'segment-026.csv', 'segment-032.csv']




.. GENERATED FROM PYTHON SOURCE LINES 80-84

.. code-block:: default
   :lineno-start: 81


    segment_51 = np.loadtxt("subsegments_time/ecg/segment-051.csv")
    segment_52 = np.loadtxt("subsegments_time/ecg/segment-052.csv")








.. GENERATED FROM PYTHON SOURCE LINES 85-106

.. code-block:: default
   :lineno-start: 86


    #Uncomment the plotly code to use interactive plot

    # fig = go.Figure()
    # fig.add_trace(go.Scatter(x=np.arange(len(segment_51)),
    #                          y= segment_51,
    #                          name='segment 51'))
    # fig.add_trace(go.Scatter(x=np.arange(len(segment_51),
    #                                      len(segment_51)+len(segment_52)),
    #                          y= segment_52,
    #                          name='segment 52'))
    # fig.show()


    fig = plt.Figure()
    plt.plot(np.arange(len(segment_51)),
             segment_51)
    plt.plot(np.arange(len(segment_51),len(segment_51)+len(segment_52)),
             segment_52)
    plt.show()




.. image-sg:: /_examples/raw/images/sphx_glr_plot_data_manipulation_001.png
   :alt: plot data manipulation
   :srcset: /_examples/raw/images/sphx_glr_plot_data_manipulation_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 107-110

.. code-block:: default
   :lineno-start: 108


    ### Example of splitting the whole data into subsegment using time domain for PPG.








.. GENERATED FROM PYTHON SOURCE LINES 111-124

.. code-block:: default
   :lineno-start: 112


    save_file_name = "example_file"
    save_file_folder = "subsegments_time"
    if not os.path.exists(save_file_folder):
        os.makedirs(save_file_folder)
    split_to_segments(ppg_data.signals.iloc[:, 1],
                      filename=None,
                      sampling_rate=100,
                      segment_length_second=10.0,
                      wave_type=ppg_data.wave_type,
                      split_type="time",
                      save_file_folder=save_file_folder)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/61 [00:00<?, ?it/s]     84%|########3 | 51/61 [00:00<00:00, 506.96it/s]    100%|##########| 61/61 [00:00<00:00, 506.65it/s]




.. GENERATED FROM PYTHON SOURCE LINES 125-129

.. code-block:: default
   :lineno-start: 125

    ppg_folder = os.path.join(save_file_folder, "ppg")
    file_list = os.listdir(ppg_folder)
    print(file_list)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ['segment-19.csv', 'segment-25.csv', 'segment-31.csv', 'segment-30.csv', 'segment-24.csv', 'segment-18.csv', 'segment-32.csv', 'segment-26.csv', 'segment-27.csv', 'segment-33.csv', 'segment-37.csv', 'segment-23.csv', 'segment-22.csv', 'segment-36.csv', 'segment-20.csv', 'segment-34.csv', 'segment-08.csv', 'segment-09.csv', 'segment-35.csv', 'segment-21.csv', 'segment-46.csv', 'segment-52.csv', 'segment-53.csv', 'segment-47.csv', 'segment-51.csv', 'segment-45.csv', 'segment-44.csv', 'segment-50.csv', 'segment-54.csv', 'segment-40.csv', 'segment-41.csv', 'segment-55.csv', 'segment-43.csv', 'segment-57.csv', 'segment-56.csv', 'segment-42.csv', 'segment-58.csv', 'segment-59.csv', 'segment-61.csv', 'segment-49.csv', 'segment-48.csv', 'segment-60.csv', 'segment-38.csv', 'segment-04.csv', 'segment-10.csv', 'segment-11.csv', 'segment-05.csv', 'segment-39.csv', 'segment-13.csv', 'segment-07.csv', 'segment-06.csv', 'segment-12.csv', 'segment-16.csv', 'segment-02.csv', 'segment-03.csv', 'segment-17.csv', 'segment-01.csv', 'segment-15.csv', 'segment-29.csv', 'segment-28.csv', 'segment-14.csv']




.. GENERATED FROM PYTHON SOURCE LINES 130-133

.. code-block:: default
   :lineno-start: 130

    segment_1 = np.loadtxt(os.path.join(ppg_folder, file_list[0]))
    segment_2 = np.loadtxt(os.path.join(ppg_folder, file_list[0]))








.. GENERATED FROM PYTHON SOURCE LINES 134-153

.. code-block:: default
   :lineno-start: 135


    # Uncomment the plotly code to use interactive plot
    # fig = go.Figure()
    # fig.add_trace(go.Scatter(x=np.arange(len(segment_1)),
    #                          y= segment_1,
    #                          name='segment 1'))
    # fig.add_trace(go.Scatter(x=np.arange(len(segment_1),
    #                                      len(segment_1)+len(segment_2)),
    #                          y= segment_2,
    #                          name='segment 2'))
    # fig.show()

    fig = plt.Figure()
    plt.plot(np.arange(len(segment_1)),
             segment_1)
    plt.plot(np.arange(len(segment_1),len(segment_1)+len(segment_2)),
             segment_2)
    plt.show()




.. image-sg:: /_examples/raw/images/sphx_glr_plot_data_manipulation_002.png
   :alt: plot data manipulation
   :srcset: /_examples/raw/images/sphx_glr_plot_data_manipulation_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 154-159

.. code-block:: default
   :lineno-start: 155


    ### Example of splitting the whole data into subsegment using frequency domian for ECG.

    ### Notes on the difference of splitting point as comparing with time domain splitting. Uncomment the plotly code - interactive plot - for better observation








.. GENERATED FROM PYTHON SOURCE LINES 160-170

.. code-block:: default
   :lineno-start: 161


    save_file_name = "example_file"
    save_file_folder = "subsegments_frequency"
    split_to_segments(channel_1,
                      filename=None,
                      sampling_rate=256,
                      segment_length_second=10.0,
                      split_type="peak_interval",
                      save_file_folder=save_file_folder)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    /Users/haihb/Documents/Work/Oucru/innovation/vital_sqi/vital_sqi/data/segment_split.py:107: VisibleDeprecationWarning:

    Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.

      0%|          | 0/104 [00:00<?, ?it/s]     19%|#9        | 20/104 [00:00<00:00, 194.96it/s]     38%|###8      | 40/104 [00:00<00:00, 194.68it/s]     58%|#####7    | 60/104 [00:00<00:00, 190.15it/s]     77%|#######6  | 80/104 [00:00<00:00, 191.65it/s]     96%|#########6| 100/104 [00:00<00:00, 191.70it/s]    100%|##########| 104/104 [00:00<00:00, 192.57it/s]




.. GENERATED FROM PYTHON SOURCE LINES 171-175

.. code-block:: default
   :lineno-start: 172


    segment_51 = np.loadtxt("subsegments_frequency/ecg/segment-051.csv")
    segment_52 = np.loadtxt("subsegments_frequency/ecg/segment-052.csv")








.. GENERATED FROM PYTHON SOURCE LINES 176-195

.. code-block:: default
   :lineno-start: 177


    # Uncomment the plotly code to use interactive plot
    # fig = go.Figure()
    # fig.add_trace(go.Scatter(x=np.arange(len(segment_51)),
    #                          y= segment_51,
    #                          name='segment 51'))
    # fig.add_trace(go.Scatter(x=np.arange(len(segment_51),
    #                                      len(segment_51)+len(segment_52)),
    #                          y= segment_52,
    #                          name='segment 52'))
    # fig.show()

    fig = plt.Figure()
    plt.plot(np.arange(len(segment_51)),
             segment_51)
    plt.plot(np.arange(len(segment_51),len(segment_51)+len(segment_52)),
             segment_52)
    plt.show()




.. image-sg:: /_examples/raw/images/sphx_glr_plot_data_manipulation_003.png
   :alt: plot data manipulation
   :srcset: /_examples/raw/images/sphx_glr_plot_data_manipulation_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 196-199

.. code-block:: default
   :lineno-start: 197


    ### Example of splitting the whole data into subsegment using frequency domian for PPG.








.. GENERATED FROM PYTHON SOURCE LINES 200-211

.. code-block:: default
   :lineno-start: 201


    save_file_name = "example_file"
    save_file_folder = "subsegments_frequency"
    split_to_segments(ppg_data.signals.iloc[:, 0],
                      filename=None,
                      sampling_rate=256,
                      segment_length_second=10.0,
                      wave_type=ppg_data.wave_type,
                      split_type="peak_interval",
                      save_file_folder=save_file_folder)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    /Users/haihb/Documents/Work/Oucru/innovation/vital_sqi/vital_sqi/data/segment_split.py:107: VisibleDeprecationWarning:

    Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.

      0%|          | 0/24 [00:00<?, ?it/s]     83%|########3 | 20/24 [00:00<00:00, 192.71it/s]    100%|##########| 24/24 [00:00<00:00, 193.03it/s]




.. GENERATED FROM PYTHON SOURCE LINES 212-216

.. code-block:: default
   :lineno-start: 213


    segment_1 = np.loadtxt("subsegments_frequency/ppg/segment-01.csv")
    segment_2 = np.loadtxt("subsegments_frequency/ppg/segment-02.csv")








.. GENERATED FROM PYTHON SOURCE LINES 217-236

.. code-block:: default
   :lineno-start: 218


    # Uncomment to use interactive plot
    # fig = go.Figure()
    # fig.add_trace(go.Scatter(x=np.arange(len(segment_1)),
    #                          y= segment_1,
    #                          name='segment 1'))
    # fig.add_trace(go.Scatter(x=np.arange(len(segment_1),
    #                                      len(segment_1)+len(segment_2)),
    #                          y= segment_2,
    #                          name='segment 2'))
    # fig.show()

    fig = plt.Figure()
    plt.plot(np.arange(len(segment_1)),
             segment_1)
    plt.plot(np.arange(len(segment_1),len(segment_1)+len(segment_2)),
             segment_2)
    plt.show()




.. image-sg:: /_examples/raw/images/sphx_glr_plot_data_manipulation_004.png
   :alt: plot data manipulation
   :srcset: /_examples/raw/images/sphx_glr_plot_data_manipulation_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 237-240

.. code-block:: default
   :lineno-start: 238


    ### Example of trimming the first and the last n-minute data.








.. GENERATED FROM PYTHON SOURCE LINES 241-244

.. code-block:: default
   :lineno-start: 242


    from vital_sqi.data import trim_data








.. GENERATED FROM PYTHON SOURCE LINES 245-248

.. code-block:: default
   :lineno-start: 246


    trimmed_data = trim_data(channel_1,minute_remove=10)








.. GENERATED FROM PYTHON SOURCE LINES 249-252

.. code-block:: default
   :lineno-start: 250


    trimmed_data





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    60000      64.759380
    60001      75.782254
    60002      84.049409
    60003      86.805127
    60004      89.560845
                 ...    
    205531    221.835325
    205532    224.591043
    205533    213.568170
    205534    205.301015
    205535    202.545296
    Name: 0, Length: 145536, dtype: float64



.. GENERATED FROM PYTHON SOURCE LINES 253-274

.. code-block:: default
   :lineno-start: 254


    # fig = go.Figure()
    # fig.add_trace(go.Scatter(x=np.arange(len(channel_1)),
    #                          y= channel_1,
    #                          name='full data'))
    # fig.show()

    # fig = go.Figure()
    # fig.add_trace(go.Scatter(x=np.arange(len(trimmed_data)),
    #                          y= trimmed_data,
    #                          name='trimmed data'))
    # fig.show()

    fig = plt.Figure()
    plt.plot(np.arange(len(channel_1)),
             channel_1)
    plt.show()
    plt.plot(np.arange(len(trimmed_data)),
             trimmed_data, color=u'#ff7f0e')
    plt.show()




.. image-sg:: /_examples/raw/images/sphx_glr_plot_data_manipulation_005.png
   :alt: plot data manipulation
   :srcset: /_examples/raw/images/sphx_glr_plot_data_manipulation_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 275-278

.. code-block:: default
   :lineno-start: 276


    #The before and after trimming 5 minutes segment**








.. GENERATED FROM PYTHON SOURCE LINES 279-282

.. code-block:: default
   :lineno-start: 280


    trimmed_data_ppg = trim_data(ppg_data.signals.iloc[:, 1], minute_remove=1)








.. GENERATED FROM PYTHON SOURCE LINES 283-305

.. code-block:: default
   :lineno-start: 284


    # fig = go.Figure()
    # fig.add_trace(go.Scatter(x=np.arange(len(ppg_data.signals)),
    #                          y= ppg_data.signals,
    #                          name='full data'))
    # fig.show()

    # fig = go.Figure()
    # fig.add_trace(go.Scatter(x=np.arange(len(trimmed_data_ppg)),
    #                          y= trimmed_data_ppg,
    #                          name='trimmed data'))
    # fig.show()

    fig = plt.Figure()
    plt.plot(np.arange(len(ppg_data.signals.iloc[:, 1])),
             ppg_data.signals.iloc[:, 1])
    plt.show()
    plt.plot(np.arange(len(trimmed_data_ppg)),
             trimmed_data_ppg,
             color=u'#ff7f0e')
    plt.show()




.. image-sg:: /_examples/raw/images/sphx_glr_plot_data_manipulation_006.png
   :alt: plot data manipulation
   :srcset: /_examples/raw/images/sphx_glr_plot_data_manipulation_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 306-309

.. code-block:: default
   :lineno-start: 307


    ### Example of before and after removing the unchanged value of the n-continuous second.








.. GENERATED FROM PYTHON SOURCE LINES 310-313

.. code-block:: default
   :lineno-start: 311


    from vital_sqi.data.removal_utilities import remove_unchanged_squences








.. GENERATED FROM PYTHON SOURCE LINES 314-321

.. code-block:: default
   :lineno-start: 315


    # create a series of unchanged value in the trimmed_data list
    idx = np.random.randint(int(len(trimmed_data)/2))
    sampling_rate = 256
    unchanged_data = trimmed_data.copy()
    unchanged_data[idx:idx+sampling_rate*20] = max(trimmed_data)








.. GENERATED FROM PYTHON SOURCE LINES 322-334

.. code-block:: default
   :lineno-start: 323


    # fig = go.Figure()
    # fig.add_trace(go.Scatter(x=np.arange(len(unchanged_data)),
    #                          y= unchanged_data,
    #                          name='trimmed data'))
    # fig.show()

    fig = plt.Figure()
    plt.plot(np.arange(len(unchanged_data)),
             unchanged_data)
    plt.show()




.. image-sg:: /_examples/raw/images/sphx_glr_plot_data_manipulation_007.png
   :alt: plot data manipulation
   :srcset: /_examples/raw/images/sphx_glr_plot_data_manipulation_007.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 335-342

.. code-block:: default
   :lineno-start: 336


    start_list, end_list = \
        remove_unchanged_squences(unchanged_data,
                                  unchanged_seconds=10,
                                  sampling_rate=256,
                                  as_dataframe=False)








.. GENERATED FROM PYTHON SOURCE LINES 343-357

.. code-block:: default
   :lineno-start: 344


    # fig = go.Figure()
    # for start,end in zip(start_list,end_list):
    #     fig.add_trace(go.Scatter(x=np.arange(start,end),
    #                              y= unchanged_data[start:end],
    #                              name='trimmed data'))
    # fig.show()

    fig = plt.Figure()
    for start, end in zip(start_list, end_list):
        plt.plot(np.arange(start, end),
             unchanged_data[start:end])
    plt.show()




.. image-sg:: /_examples/raw/images/sphx_glr_plot_data_manipulation_008.png
   :alt: plot data manipulation
   :srcset: /_examples/raw/images/sphx_glr_plot_data_manipulation_008.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 358-361

.. code-block:: default
   :lineno-start: 359


    ### Example of removing invalid signal data (signal = 0 and other vital signs exceed the normal range)








.. GENERATED FROM PYTHON SOURCE LINES 362-365

.. code-block:: default
   :lineno-start: 363


    from vital_sqi.data import remove_invalid








.. GENERATED FROM PYTHON SOURCE LINES 366-370

.. code-block:: default
   :lineno-start: 367


    trimmed_data = trim_data(channel_1, minute_remove=10)
    error_data = trimmed_data.copy()








.. GENERATED FROM PYTHON SOURCE LINES 371-377

.. code-block:: default
   :lineno-start: 372


    # create a series of unchanged value in the trimmed_data list
    idx = np.random.randint(int(len(error_data)/2))
    sampling_rate = 256
    error_data[idx:idx+sampling_rate*20] = 0








.. GENERATED FROM PYTHON SOURCE LINES 378-381

.. code-block:: default
   :lineno-start: 379


    start_list, end_list = remove_invalid(error_data,as_dataframe=False)








.. GENERATED FROM PYTHON SOURCE LINES 382-395

.. code-block:: default
   :lineno-start: 383


    # fig = go.Figure()
    # for start,end in zip(start_list,end_list):
    #     fig.add_trace(go.Scatter(x= np.arange(start,end),
    #                              y= trimmed_data[start:end],
    #                              name='trimmed data'))
    # fig.show()
    fig = plt.Figure()
    for start,end in zip(start_list,end_list):
        plt.plot(np.arange(start,end),
             trimmed_data[start:end])
    plt.show()




.. image-sg:: /_examples/raw/images/sphx_glr_plot_data_manipulation_009.png
   :alt: plot data manipulation
   :srcset: /_examples/raw/images/sphx_glr_plot_data_manipulation_009.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 396-399

.. code-block:: default
   :lineno-start: 397


    ### One example of removing invalid signal data using the frequency domain








.. GENERATED FROM PYTHON SOURCE LINES 400-403

.. code-block:: default
   :lineno-start: 401


    from vital_sqi.data import cut_by_frequency_partition








.. GENERATED FROM PYTHON SOURCE LINES 404-411

.. code-block:: default
   :lineno-start: 405


    start_list, end_list = \
        cut_by_frequency_partition(trimmed_data,
                                  window_size=30000,
                                  peak_threshold_ratio=4,
                                  lower_bound_threshold=2)








.. GENERATED FROM PYTHON SOURCE LINES 412-418

.. code-block:: default
   :lineno-start: 413


    #Welch method is applied for the whole data to obtain the common frequency component.**

    #*After that, a scanning window with the size of 3000 samples is computed for each subsegment to analyse its frequency component.**
    #Any windows having its component exceeds the peak_threshold_ratio (the ratio between the number of subsegment's components and the number of whole data components) will be removed.**








.. GENERATED FROM PYTHON SOURCE LINES 419-439

.. code-block:: default
   :lineno-start: 420


    # fig = go.Figure()
    # for start,end in zip(start_list,end_list):
    #     fig.add_trace(go.Scatter(x= np.arange(start,end),
    #                              y= trimmed_data[start:end],
    #                              name='trimmed data'))
    # fig.show()

    fig = plt.Figure()
    plt.plot(np.arange(len(trimmed_data)),
             trimmed_data)
    plt.show()


    fig = plt.Figure()
    for start,end in zip(start_list,end_list):
        plt.plot(np.arange(start,end),
             trimmed_data[start:end])
    plt.show()




.. image-sg:: /_examples/raw/images/sphx_glr_plot_data_manipulation_010.png
   :alt: plot data manipulation
   :srcset: /_examples/raw/images/sphx_glr_plot_data_manipulation_010.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 440-445

.. code-block:: default
   :lineno-start: 441


    out = PPG_reader(os.path.join(os.getcwd(),'../../', 'tests/test_data/ppg_smartcare.csv'),
                     timestamp_idx = ['TIMESTAMP_MS'], signal_idx = ['PLETH'],
                     info_idx = ['PULSE_BPM','SPO2_PCT','PERFUSION_INDEX'])








.. GENERATED FROM PYTHON SOURCE LINES 446-453

.. code-block:: default
   :lineno-start: 447


    start_list, end_list = \
        cut_by_frequency_partition(ppg_data.signals.iloc[:, 1],
                                  window_size=30000,
                                  peak_threshold_ratio=2,
                                  lower_bound_threshold=2)








.. GENERATED FROM PYTHON SOURCE LINES 454-472

.. code-block:: default
   :lineno-start: 455


    # fig = go.Figure()
    # for start,end in zip(start_list,end_list):
    #     fig.add_trace(go.Scatter(x= np.arange(start,end),
    #                              y= ppg_data.signals[start:end],
    #                              name='trimmed data'))
    # fig.show()
    fig = plt.Figure()
    plt.plot(np.arange(len(ppg_data.signals.iloc[:, 1])),
             ppg_data.signals.iloc[:, 1])
    plt.show()

    # .. note gives an error
    #fig = plt.Figure()
    #for start,end in zip(start_list,end_list):
    #    plt.plot(np.arange(start,end),
    #         ppg_data.signals[start:end])
    #plt.show()



.. image-sg:: /_examples/raw/images/sphx_glr_plot_data_manipulation_011.png
   :alt: plot data manipulation
   :srcset: /_examples/raw/images/sphx_glr_plot_data_manipulation_011.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  5.178 seconds)


.. _sphx_glr_download__examples_raw_plot_data_manipulation.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_data_manipulation.py <plot_data_manipulation.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_data_manipulation.ipynb <plot_data_manipulation.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
