
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples/raw/plot_preprocess_signals.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_raw_plot_preprocess_signals.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_raw_plot_preprocess_signals.py:


Preprocessing signal
====================

.. GENERATED FROM PYTHON SOURCE LINES 8-13

.. code-block:: default
   :lineno-start: 9


    import vital_sqi
    from vital_sqi.data.signal_io import ECG_reader, PPG_reader
    import os








.. GENERATED FROM PYTHON SOURCE LINES 14-18

.. code-block:: default
   :lineno-start: 15


    ### Read an EDF file using ECG_reader
    #The function returns an Signal SQI object and a Dictionary contains the information of the file settings**








.. GENERATED FROM PYTHON SOURCE LINES 19-25

.. code-block:: default
   :lineno-start: 21



    from vital_sqi.dataset import load_ecg, load_ppg
    # ecg_data = load_ecg()
    file_name = os.path.abspath('../../tests/test_data/example.edf')
    ecg_data = ECG_reader(file_name, 'edf')




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Reading Channels:   0%|          | 0/2 [00:00<?, ?it/s]    Reading Channels: 100%|##########| 2/2 [00:00<00:00, 34.41it/s]




.. GENERATED FROM PYTHON SOURCE LINES 26-29

.. code-block:: default
   :lineno-start: 27


    ecg_data.info





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [{'technician': '', 'recording_additional': '', 'patientname': 'NN', 'patient_additional': '', 'patientcode': 'Sensor: <NONE>, Device Type:', 'equipment': 'Recording', 'admincode': '24H-Electrode', 'gender': '', 'startdate': datetime.datetime(2019, 1, 22, 1, 4, 13), 'birthdate': '', 'annotations': [[1037.578, b'0.000000', 'Electrode Removed']]}, [{'label': 'ECG Channel 1', 'dimension': 'uV', 'sample_rate': 256, 'physical_max': 90298.0, 'physical_min': -90298.0, 'digital_max': 32767, 'digital_min': -32768, 'prefilter': '', 'transducer': ''}, {'label': 'ECG Channel 2', 'dimension': 'uV', 'sample_rate': 256, 'physical_max': 90298.0, 'physical_min': -90298.0, 'digital_max': 32767, 'digital_min': -32768, 'prefilter': '', 'transducer': ''}]]



.. GENERATED FROM PYTHON SOURCE LINES 30-37

.. code-block:: default
   :lineno-start: 31


    ### List all of the attributes in Signal_SQI object
    #1. signals: a numpy array contains the raw amplitude values of the devices
    #2. sampling_rate: the sampling rate derives from the signal data
    #3. wave_type: the types of signal. Only 2 types are accepted: either 'ecg' or 'ppg'
    #4. sqi_indexes: a list of sqi_indexes








.. GENERATED FROM PYTHON SOURCE LINES 38-41

.. code-block:: default
   :lineno-start: 39


    ecg_data.__dict__





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    {'signals':                           timestamps             0            1
    0      2019-01-21 18:04:13.000000000 -13675.252155 -7651.251911
    1      2019-01-21 18:04:13.003906250  -1351.679835   191.522423
    2      2019-01-21 18:04:13.007812500  12283.614405  9414.911635
    3      2019-01-21 18:04:13.011718750  10867.175189  7609.916136
    4      2019-01-21 18:04:13.015625000  -2296.891218 -2713.004685
    ...                              ...           ...          ...
    265531 2019-01-21 18:21:30.230468750   2872.836347     1.377859
    265532 2019-01-21 18:21:30.234375000   6587.544640     1.377859
    265533 2019-01-21 18:21:30.238281250   7298.519966     1.377859
    265534 2019-01-21 18:21:30.242187500   7838.640757     1.377859
    265535 2019-01-21 18:21:30.246093750   9784.177890     1.377859

    [265536 rows x 3 columns], 'sampling_rate': 256, 'start_datetime': datetime.datetime(2019, 1, 22, 1, 4, 13), 'wave_type': 'ecg', 'info': [{'technician': '', 'recording_additional': '', 'patientname': 'NN', 'patient_additional': '', 'patientcode': 'Sensor: <NONE>, Device Type:', 'equipment': 'Recording', 'admincode': '24H-Electrode', 'gender': '', 'startdate': datetime.datetime(2019, 1, 22, 1, 4, 13), 'birthdate': '', 'annotations': [[1037.578, b'0.000000', 'Electrode Removed']]}, [{'label': 'ECG Channel 1', 'dimension': 'uV', 'sample_rate': 256, 'physical_max': 90298.0, 'physical_min': -90298.0, 'digital_max': 32767, 'digital_min': -32768, 'prefilter': '', 'transducer': ''}, {'label': 'ECG Channel 2', 'dimension': 'uV', 'sample_rate': 256, 'physical_max': 90298.0, 'physical_min': -90298.0, 'digital_max': 32767, 'digital_min': -32768, 'prefilter': '', 'transducer': ''}]], 'sqis': None, 'rules': None, 'ruleset': None, 'isSplit': False, 'isFiltered': False, 'SQIComputed': False}



.. GENERATED FROM PYTHON SOURCE LINES 42-45

.. code-block:: default
   :lineno-start: 43


    all_channels = ecg_data.signals








.. GENERATED FROM PYTHON SOURCE LINES 46-50

.. code-block:: default
   :lineno-start: 47


    channel_1 = all_channels.iloc[:, 1]
    ecg_sample_idx = int(len(all_channels)/2)








.. GENERATED FROM PYTHON SOURCE LINES 51-56

.. code-block:: default
   :lineno-start: 52


    ecg_sample_complex_for_tapering = \
        channel_1[ecg_sample_idx-45:ecg_sample_idx+210]
    ecg_sample_complex = channel_1[ecg_sample_idx+80:ecg_sample_idx+225]








.. GENERATED FROM PYTHON SOURCE LINES 57-61

.. code-block:: default
   :lineno-start: 58


    import plotly.graph_objects as go
    import numpy as np








.. GENERATED FROM PYTHON SOURCE LINES 62-65

.. code-block:: default
   :lineno-start: 63


    ### We will focus on 1 QRS-complex to examine the function








.. GENERATED FROM PYTHON SOURCE LINES 66-73

.. code-block:: default
   :lineno-start: 67


    fig = go.Figure()
    fig.add_trace(go.Scatter(x=np.arange(len(ecg_sample_complex)),
                             y=ecg_sample_complex))
    #fig.show()
    fig






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>            <script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG"></script><script type="text/javascript">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: "STIX-Web"}});}</script>                <script type="text/javascript">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>
            <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>                <div id="2e38aecd-1987-477e-be7f-25355f5141a2" class="plotly-graph-div" style="height:525px; width:100%;"></div>            <script type="text/javascript">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById("2e38aecd-1987-477e-be7f-25355f5141a2")) {                    Plotly.newPlot(                        "2e38aecd-1987-477e-be7f-25355f5141a2",                        [{"type": "scatter", "x": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144], "y": [23.423605706874188, 9.645014114595254, -1.3778591592278935, -9.645014114595254, -23.423605706874188, -31.69076066224155, -31.69076066224155, -20.667887388418404, -17.912169069962616, -17.912169069962616, -23.423605706874188, -26.179324025329976, -17.912169069962616, -9.645014114595254, -9.645014114595254, -9.645014114595254, -6.889295796139468, 1.3778591592278935, 6.889295796139468, 6.889295796139468, 4.13357747768368, 1.3778591592278935, 6.889295796139468, 17.912169069962616, 15.156450751506828, 6.889295796139468, 4.13357747768368, 9.645014114595254, 23.423605706874188, 34.446478980697336, 39.95791561760891, 39.95791561760891, 42.713633936064696, 50.980788891432056, 59.24794384679942, 59.24794384679942, 64.759380483711, 67.51509880216678, 75.78225375753414, 78.53797207598993, 73.02653543907836, 67.51509880216678, 67.51509880216678, 67.51509880216678, 67.51509880216678, 53.73650720988785, 31.69076066224155, 4.13357747768368, -15.156450751506828, -20.667887388418404, -31.69076066224155, -45.46935225452049, -53.73650720988785, -48.22507057297627, -39.95791561760891, -37.20219729915313, -45.46935225452049, -50.980788891432056, -34.446478980697336, 12.400732433051042, 53.73650720988785, 106.0951552605478, 188.7667048142214, 257.6596627756161, 230.1024795910582, 84.0494087129015, -199.78957808804455, -569.05583276112, -872.1848477912566, -941.0778057526512, -770.2232700083924, -593.8572976272221, -398.2012970168612, -257.6596627756161, -141.91949340047302, -48.22507057297627, 4.13357747768368, 17.912169069962616, 28.935042343785764, 39.95791561760891, 42.713633936064696, 39.95791561760891, 39.95791561760891, 45.46935225452049, 56.49222552834363, 62.00366216525521, 62.00366216525521, 53.73650720988785, 59.24794384679942, 67.51509880216678, 75.78225375753414, 70.27081712062257, 64.759380483711, 67.51509880216678, 78.53797207598993, 86.80512703135729, 86.80512703135729, 86.80512703135729, 95.07228198672465, 106.0951552605478, 117.11802853437095, 125.38518348973831, 130.89662012664988, 139.16377508201725, 152.94236667429618, 169.4766765850309, 183.25526817730983, 191.5224231326772, 197.03385976958876, 210.81245136186772, 227.34676127260244, 238.36963454642557, 230.1024795910582, 227.34676127260244, 227.34676127260244, 235.61391622796978, 238.36963454642557, 227.34676127260244, 213.56816968032348, 205.30101472495613, 202.54529640650034, 191.5224231326772, 177.74383154039825, 158.45380331120776, 141.91949340047302, 133.65233844510567, 122.62946517128252, 103.33943694209201, 84.0494087129015, 67.51509880216678, 59.24794384679942, 53.73650720988785, 39.95791561760891, 20.667887388418404, 4.13357747768368, -6.889295796139468, -9.645014114595254, -17.912169069962616, -28.935042343785764, -34.446478980697336, -26.179324025329976, -23.423605706874188, -26.179324025329976, -31.69076066224155, -28.935042343785764]}],                        {"template": {"data": {"bar": [{"error_x": {"color": "#2a3f5f"}, "error_y": {"color": "#2a3f5f"}, "marker": {"line": {"color": "#E5ECF6", "width": 0.5}}, "type": "bar"}], "barpolar": [{"marker": {"line": {"color": "#E5ECF6", "width": 0.5}}, "type": "barpolar"}], "carpet": [{"aaxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "baxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "type": "carpet"}], "choropleth": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "choropleth"}], "contour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "contour"}], "contourcarpet": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "contourcarpet"}], "heatmap": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmap"}], "heatmapgl": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmapgl"}], "histogram": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "histogram"}], "histogram2d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2d"}], "histogram2dcontour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2dcontour"}], "mesh3d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "mesh3d"}], "parcoords": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "parcoords"}], "pie": [{"automargin": true, "type": "pie"}], "scatter": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatter"}], "scatter3d": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatter3d"}], "scattercarpet": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattercarpet"}], "scattergeo": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergeo"}], "scattergl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergl"}], "scattermapbox": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattermapbox"}], "scatterpolar": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolar"}], "scatterpolargl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolargl"}], "scatterternary": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterternary"}], "surface": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "surface"}], "table": [{"cells": {"fill": {"color": "#EBF0F8"}, "line": {"color": "white"}}, "header": {"fill": {"color": "#C8D4E3"}, "line": {"color": "white"}}, "type": "table"}]}, "layout": {"annotationdefaults": {"arrowcolor": "#2a3f5f", "arrowhead": 0, "arrowwidth": 1}, "autotypenumbers": "strict", "coloraxis": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "colorscale": {"diverging": [[0, "#8e0152"], [0.1, "#c51b7d"], [0.2, "#de77ae"], [0.3, "#f1b6da"], [0.4, "#fde0ef"], [0.5, "#f7f7f7"], [0.6, "#e6f5d0"], [0.7, "#b8e186"], [0.8, "#7fbc41"], [0.9, "#4d9221"], [1, "#276419"]], "sequential": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "sequentialminus": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]]}, "colorway": ["#636efa", "#EF553B", "#00cc96", "#ab63fa", "#FFA15A", "#19d3f3", "#FF6692", "#B6E880", "#FF97FF", "#FECB52"], "font": {"color": "#2a3f5f"}, "geo": {"bgcolor": "white", "lakecolor": "white", "landcolor": "#E5ECF6", "showlakes": true, "showland": true, "subunitcolor": "white"}, "hoverlabel": {"align": "left"}, "hovermode": "closest", "mapbox": {"style": "light"}, "paper_bgcolor": "white", "plot_bgcolor": "#E5ECF6", "polar": {"angularaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "radialaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "scene": {"xaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "yaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "zaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}}, "shapedefaults": {"line": {"color": "#2a3f5f"}}, "ternary": {"aaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "baxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "caxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "title": {"x": 0.05}, "xaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}, "yaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}}}},                        {"responsive": true}                    )                };                            </script>        </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 74-84

.. code-block:: default
   :lineno-start: 74

    file_name = os.path.abspath('../../tests/test_data/ppg_smartcare.csv')
    ppg_data = PPG_reader(file_name,
                        signal_idx=['PLETH'],
                        timestamp_idx=['TIMESTAMP_MS'],
                        info_idx=['PULSE_BPM', 'SPO2_PCT', 'PERFUSION_INDEX'],
                        sampling_rate=100,
                        start_datetime='2020/12/30 10:00:00')

    # ppg_data = load_ppg()








.. GENERATED FROM PYTHON SOURCE LINES 85-88

.. code-block:: default
   :lineno-start: 86


    ppg_data.__dict__





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    {'signals':          timestamps  PLETH
    0      1.655357e+09  34019
    1      1.655357e+09  33322
    2      1.655357e+09  32664
    3      1.655357e+09  32003
    4      1.655357e+09  31360
    ...             ...    ...
    61268  1.655357e+09  12298
    61269  1.655357e+09  11386
    61270  1.655357e+09  10529
    61271  1.655357e+09   9729
    61272  1.655357e+09   9020

    [61273 rows x 2 columns], 'sampling_rate': 100, 'start_datetime': None, 'wave_type': 'ppg', 'info':        PULSE_BPM  SPO2_PCT  PERFUSION_INDEX
    0             83      97.6              2.9
    1             83      97.6              2.9
    2             83      97.6              2.9
    3             83      97.6              2.9
    4             83      97.6              2.9
    ...          ...       ...              ...
    61268         72      93.6              2.4
    61269         72      93.6              2.4
    61270         72      93.6              2.4
    61271         72      93.6              2.4
    61272         72      93.6              2.4

    [61273 rows x 3 columns], 'sqis': None, 'rules': None, 'ruleset': None, 'isSplit': False, 'isFiltered': False, 'SQIComputed': False}



.. GENERATED FROM PYTHON SOURCE LINES 89-92

.. code-block:: default
   :lineno-start: 90


    ppg_sample_idx = int(len(ppg_data.signals)/2)








.. GENERATED FROM PYTHON SOURCE LINES 93-99

.. code-block:: default
   :lineno-start: 94


    ppg_sample_complex_for_tapering = \
        ppg_data.signals.iloc[:, 1][ppg_sample_idx+185:ppg_sample_idx+225]
    ppg_sample_complex = ppg_data.signals.iloc[:, 1][
                         ppg_sample_idx+195:ppg_sample_idx+267]








.. GENERATED FROM PYTHON SOURCE LINES 100-103

.. code-block:: default
   :lineno-start: 101


    ### Subsequently, we also focus on 1 PPG waveform to examine the function








.. GENERATED FROM PYTHON SOURCE LINES 104-111

.. code-block:: default
   :lineno-start: 105


    fig = go.Figure()
    fig.add_trace(go.Scatter(x=np.arange(len(ppg_sample_complex)),
                             y=ppg_sample_complex))
    #fig.show()
    fig






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>            <script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG"></script><script type="text/javascript">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: "STIX-Web"}});}</script>                <script type="text/javascript">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>
            <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>                <div id="576f9c4c-d982-48b2-a6bc-6309396b819a" class="plotly-graph-div" style="height:525px; width:100%;"></div>            <script type="text/javascript">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById("576f9c4c-d982-48b2-a6bc-6309396b819a")) {                    Plotly.newPlot(                        "576f9c4c-d982-48b2-a6bc-6309396b819a",                        [{"type": "scatter", "x": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], "y": [33954, 32852, 31735, 30604, 29458, 28308, 27176, 26052, 24935, 23838, 22770, 21733, 20726, 19750, 18795, 17882, 17001, 16140, 15312, 14505, 13719, 12967, 12225, 11505, 10807, 10109, 9434, 8770, 8106, 7455, 6804, 6186, 5613, 5106, 4732, 4532, 4574, 4921, 5617, 6727, 8295, 10321, 12783, 15651, 18883, 22404, 26131, 29989, 33905, 37779, 41543, 45115, 48447, 51504, 54239, 56640, 58683, 60367, 61693, 62258, 62258, 62258, 62173, 61865, 61282, 60488, 59493, 58373, 57126, 55816, 54454, 53093]}],                        {"template": {"data": {"bar": [{"error_x": {"color": "#2a3f5f"}, "error_y": {"color": "#2a3f5f"}, "marker": {"line": {"color": "#E5ECF6", "width": 0.5}}, "type": "bar"}], "barpolar": [{"marker": {"line": {"color": "#E5ECF6", "width": 0.5}}, "type": "barpolar"}], "carpet": [{"aaxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "baxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "type": "carpet"}], "choropleth": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "choropleth"}], "contour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "contour"}], "contourcarpet": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "contourcarpet"}], "heatmap": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmap"}], "heatmapgl": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmapgl"}], "histogram": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "histogram"}], "histogram2d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2d"}], "histogram2dcontour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2dcontour"}], "mesh3d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "mesh3d"}], "parcoords": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "parcoords"}], "pie": [{"automargin": true, "type": "pie"}], "scatter": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatter"}], "scatter3d": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatter3d"}], "scattercarpet": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattercarpet"}], "scattergeo": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergeo"}], "scattergl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergl"}], "scattermapbox": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattermapbox"}], "scatterpolar": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolar"}], "scatterpolargl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolargl"}], "scatterternary": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterternary"}], "surface": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "surface"}], "table": [{"cells": {"fill": {"color": "#EBF0F8"}, "line": {"color": "white"}}, "header": {"fill": {"color": "#C8D4E3"}, "line": {"color": "white"}}, "type": "table"}]}, "layout": {"annotationdefaults": {"arrowcolor": "#2a3f5f", "arrowhead": 0, "arrowwidth": 1}, "autotypenumbers": "strict", "coloraxis": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "colorscale": {"diverging": [[0, "#8e0152"], [0.1, "#c51b7d"], [0.2, "#de77ae"], [0.3, "#f1b6da"], [0.4, "#fde0ef"], [0.5, "#f7f7f7"], [0.6, "#e6f5d0"], [0.7, "#b8e186"], [0.8, "#7fbc41"], [0.9, "#4d9221"], [1, "#276419"]], "sequential": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "sequentialminus": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]]}, "colorway": ["#636efa", "#EF553B", "#00cc96", "#ab63fa", "#FFA15A", "#19d3f3", "#FF6692", "#B6E880", "#FF97FF", "#FECB52"], "font": {"color": "#2a3f5f"}, "geo": {"bgcolor": "white", "lakecolor": "white", "landcolor": "#E5ECF6", "showlakes": true, "showland": true, "subunitcolor": "white"}, "hoverlabel": {"align": "left"}, "hovermode": "closest", "mapbox": {"style": "light"}, "paper_bgcolor": "white", "plot_bgcolor": "#E5ECF6", "polar": {"angularaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "radialaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "scene": {"xaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "yaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "zaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}}, "shapedefaults": {"line": {"color": "#2a3f5f"}}, "ternary": {"aaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "baxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "caxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "title": {"x": 0.05}, "xaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}, "yaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}}}},                        {"responsive": true}                    )                };                            </script>        </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 112-116

.. code-block:: default
   :lineno-start: 113


    ## Examples on preprocessing function
    #import the preprocess package








.. GENERATED FROM PYTHON SOURCE LINES 117-120

.. code-block:: default
   :lineno-start: 118


    from vital_sqi import preprocess








.. GENERATED FROM PYTHON SOURCE LINES 121-124

.. code-block:: default
   :lineno-start: 122


    ### Taper data into the zerobaseline to remove the edge effect








.. GENERATED FROM PYTHON SOURCE LINES 125-133

.. code-block:: default
   :lineno-start: 126


    ecg_sample_tapering_zerobaseline = preprocess.preprocess_signal.taper_signal(
                                                            ecg_sample_complex,
                                                            shift_min_to_zero=True)
    ppg_sample_tapering_zerobaseline = preprocess.preprocess_signal.taper_signal(
                                                            ppg_sample_complex,
                                                            shift_min_to_zero=True)



.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "/Users/haihb/Documents/Oucru/innovation/vital_sqi/examples/raw/plot_preprocess_signals.py", line 128, in <module>
        shift_min_to_zero=True)
      File "/Users/haihb/miniconda3/envs/sqi/lib/python3.7/site-packages/vital_sqi/preprocess/preprocess_signal.py", line 30, in taper_signal
        check_signal_format(s)
      File "/Users/haihb/miniconda3/envs/sqi/lib/python3.7/site-packages/vital_sqi/common/utils.py", line 380, in check_signal_format
        assert isinstance(s, pd.DataFrame), 'Expected a pd.DataFrame.'
    AssertionError: Expected a pd.DataFrame.




.. GENERATED FROM PYTHON SOURCE LINES 134-154

.. code-block:: default
   :lineno-start: 135


    fig = go.Figure()
    fig.add_trace(go.Scatter(x=np.arange(len(ecg_sample_complex)),
                             y=ecg_sample_complex,
                             name='original_signal'))
    fig.add_trace(go.Scatter(x=np.arange(len(ecg_sample_complex)),
                             y=ecg_sample_tapering_zerobaseline,
                             name='tapered signal'))
    #fig.show(title='ecg tapering')
    fig
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=np.arange(len(ppg_sample_complex)),
                             y=ppg_sample_complex,
                             name='original_signal'))
    fig.add_trace(go.Scatter(x=np.arange(len(ppg_sample_tapering_zerobaseline)),
                             y=ppg_sample_tapering_zerobaseline,
                             name='tapered signal'))
    #fig.show()
    fig


.. GENERATED FROM PYTHON SOURCE LINES 155-160

.. code-block:: default
   :lineno-start: 156


    ### The tapering data will pin the first and last part at the zero pivot. The remaining will be scale according to the windows format

    #The default tapering method shifts the segment by the value equal to the minimum value to the zero baseline set shift_min_to_zero=False**


.. GENERATED FROM PYTHON SOURCE LINES 161-167

.. code-block:: default
   :lineno-start: 162


    ecg_sample_tapering_zerobaseline = \
        preprocess.taper_signal(ecg_sample_complex,shift_min_to_zero=False)
    ppg_sample_tapering_zerobaseline = \
        preprocess.taper_signal(ppg_sample_complex,shift_min_to_zero=False)


.. GENERATED FROM PYTHON SOURCE LINES 168-187

.. code-block:: default
   :lineno-start: 169


    fig = go.Figure()
    fig.add_trace(go.Scatter(x=np.arange(len(ecg_sample_complex)),
                             y=ecg_sample_complex,
                             name='original_signal'))
    fig.add_trace(go.Scatter(x=np.arange(len(ecg_sample_complex)),
                             y=ecg_sample_tapering_zerobaseline,
                             name='tapered signal'))
    #fig.show(title='ECG')
    fig
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=np.arange(len(ppg_sample_complex)),
                             y=ppg_sample_complex,
                             name='original_signal'))
    fig.add_trace(go.Scatter(x=np.arange(len(ppg_sample_complex)),
                             y=ppg_sample_tapering_zerobaseline,
                             name='tapered signal'))
    #fig.show(itle='PPG')
    fig

.. GENERATED FROM PYTHON SOURCE LINES 188-193

.. code-block:: default
   :lineno-start: 189


    ### Different windows format can be used to perform tapering process
    #window is imported from the scipy package (scipy.signal.window). Default is using Tukey window**



.. GENERATED FROM PYTHON SOURCE LINES 194-197

.. code-block:: default
   :lineno-start: 195


    import scipy.signal.windows as wd


.. GENERATED FROM PYTHON SOURCE LINES 198-201

.. code-block:: default
   :lineno-start: 199


    #Initialize a hann windows and cast it as a list-type.**


.. GENERATED FROM PYTHON SOURCE LINES 202-206

.. code-block:: default
   :lineno-start: 203


    window_ecg = list(wd.hann(len(ecg_sample_complex)))
    window_ppg = list(wd.hann(len(ppg_sample_complex)))


.. GENERATED FROM PYTHON SOURCE LINES 207-215

.. code-block:: default
   :lineno-start: 208


    ecg_sample_tapering_hann = preprocess.taper_signal(ecg_sample_complex,
                                               window=window_ecg,
                                               shift_min_to_zero=False)
    ppg_sample_tapering_hann = preprocess.taper_signal(ppg_sample_complex,
                                               window=window_ppg,
                                               shift_min_to_zero=False)


.. GENERATED FROM PYTHON SOURCE LINES 216-247

.. code-block:: default
   :lineno-start: 217


    fig = go.Figure()
    fig.add_trace(go.Scatter(x=np.arange(len(ecg_sample_complex)),
                             y=ecg_sample_complex,
                             name='original signal'))
    fig.add_trace(go.Scatter(x=np.arange(len(ecg_sample_complex)),
                             y=ecg_sample_tapering_zerobaseline,
                             name='tukey window tapering'))
    fig.add_trace(go.Scatter(x=np.arange(len(ecg_sample_complex)),
                             y=ecg_sample_tapering_hann,
                             name='hann window tapering'))

    fig.update_layout(
        title='ECG'
    )
    fig

    fig = go.Figure()
    fig.add_trace(go.Scatter(x=np.arange(len(ppg_sample_complex)),
                             y=ppg_sample_complex,
                             name='original signal'))
    fig.add_trace(go.Scatter(x=np.arange(len(ppg_sample_complex)),
                             y=ppg_sample_tapering_zerobaseline,
                             name='tukey window tapering'))
    fig.add_trace(go.Scatter(x=np.arange(len(ppg_sample_complex)),
                             y=ppg_sample_tapering_hann,
                             name='hann window tapering'))
    fig.update_layout(
        title='PPG'
    )


.. GENERATED FROM PYTHON SOURCE LINES 248-252

.. code-block:: default
   :lineno-start: 249


    ### Example of smoothing function.
    #Apply a convolutional window to smooth the signal (the default windows is flat and can be assigned with different distribution)**


.. GENERATED FROM PYTHON SOURCE LINES 253-262

.. code-block:: default
   :lineno-start: 254


    ecg_sample_smoothing_5 = preprocess.smooth_signal(ecg_sample_complex)
    ecg_sample_smoothing_9 = preprocess.smooth_signal(ecg_sample_complex,
                                                      window_len=9)

    ppg_sample_smoothing_5 = preprocess.smooth_signal(ppg_sample_complex)
    ppg_sample_smoothing_9 = preprocess.smooth_signal(ppg_sample_complex,
                                                      window_len=9)


.. GENERATED FROM PYTHON SOURCE LINES 263-290

.. code-block:: default
   :lineno-start: 264


    fig = go.Figure()
    fig.add_trace(go.Scatter(x=np.arange(len(ecg_sample_complex)),
                             y=ecg_sample_complex,
                             name='original_signal'))
    fig.add_trace(go.Scatter(x=np.arange(len(ecg_sample_complex)),
                             y=ecg_sample_smoothing_5,
                             name='smoothing - sliding window length = 5'))
    fig.add_trace(go.Scatter(x=np.arange(len(ecg_sample_complex)),
                             y=ecg_sample_smoothing_9,
                             name='smoothing - sliding window length = 9'))
    #fig.show()
    fig

    fig = go.Figure()
    fig.add_trace(go.Scatter(x=np.arange(len(ppg_sample_complex)),
                             y=ppg_sample_complex,
                             name='original_signal'))
    fig.add_trace(go.Scatter(x=np.arange(len(ppg_sample_complex)),
                             y=ppg_sample_smoothing_5,
                             name='smoothing - sliding window length = 5'))
    fig.add_trace(go.Scatter(x=np.arange(len(ppg_sample_complex)),
                             y=ppg_sample_smoothing_9,
                             name='smoothing - sliding window length = 9'))
    #fig.show()
    fig


.. GENERATED FROM PYTHON SOURCE LINES 291-295

.. code-block:: default
   :lineno-start: 292


    ### Example of squeezing function
    #We will use the default resampling function from scipy package**


.. GENERATED FROM PYTHON SOURCE LINES 296-299

.. code-block:: default
   :lineno-start: 297


    from scipy import signal


.. GENERATED FROM PYTHON SOURCE LINES 300-306

.. code-block:: default
   :lineno-start: 301


    ecg_sample_squeezing = signal.resample(ecg_sample_complex,
                                           int(len(ecg_sample_complex)/2))
    ppg_sample_squeezing = signal.resample(ppg_sample_complex,
                                           int(len(ppg_sample_complex)/2))


.. GENERATED FROM PYTHON SOURCE LINES 307-320

.. code-block:: default
   :lineno-start: 308


    fig = go.Figure()
    fig.add_trace(go.Scatter(x=np.arange(len(ecg_sample_complex)),
                             y= ecg_sample_complex))
    #fig.show(title='original data')
    fig

    fig = go.Figure()
    fig.add_trace(go.Scatter(x=np.arange(len(ecg_sample_squeezing)),
                             y= ecg_sample_squeezing))
    #fig.show(title='squeezed data')
    fig


.. GENERATED FROM PYTHON SOURCE LINES 321-333

.. code-block:: default
   :lineno-start: 322


    fig = go.Figure()
    fig.add_trace(go.Scatter(x=np.arange(len(ppg_sample_complex)),
                             y= ppg_sample_complex,))
    #fig.show(title='original data')
    fig
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=np.arange(len(ppg_sample_squeezing)),
                             y= ppg_sample_squeezing))
    #fig.show(title='squeezed data')
    fig


.. GENERATED FROM PYTHON SOURCE LINES 334-337

.. code-block:: default
   :lineno-start: 335


    ### Example of expanding function


.. GENERATED FROM PYTHON SOURCE LINES 338-344

.. code-block:: default
   :lineno-start: 339


    ecg_sample_expanding = signal.resample(ecg_sample_squeezing,
                                           int(len(ecg_sample_squeezing)*2))
    ppg_sample_expanding = signal.resample(ppg_sample_squeezing,
                                           int(len(ppg_sample_squeezing)*2))


.. GENERATED FROM PYTHON SOURCE LINES 345-359

.. code-block:: default
   :lineno-start: 346


    fig = go.Figure()
    fig.add_trace(go.Scatter(x=np.arange(len(ppg_sample_complex)),
                             y= ppg_sample_complex,
                             name="original data"))
    #fig.show(title='original data')
    fig
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=np.arange(len(ppg_sample_expanding)),
                             y= ppg_sample_expanding,
                             name="the expanded data from the squeezed data"))
    #fig.show()
    fig


.. GENERATED FROM PYTHON SOURCE LINES 360-363

.. code-block:: default
   :lineno-start: 361


    # Example with bandpass filter


.. GENERATED FROM PYTHON SOURCE LINES 364-367

.. code-block:: default
   :lineno-start: 365


    from vital_sqi.common.band_filter import BandpassFilter


.. GENERATED FROM PYTHON SOURCE LINES 368-373

.. code-block:: default
   :lineno-start: 369


    butter_bandpass = BandpassFilter("butter",fs=256)
    cheby_bandpass = BandpassFilter("cheby1",fs=256)
    ellip_bandpass = BandpassFilter("ellip",fs=256)


.. GENERATED FROM PYTHON SOURCE LINES 374-394

.. code-block:: default
   :lineno-start: 375


    fig = go.Figure()
    fig.add_trace(go.Scatter(x=np.arange(len(ecg_sample_complex)),
                             y= ecg_sample_complex,
                             name='original signal'))
    fig.add_trace(go.Scatter(x=np.arange(len(ecg_sample_complex)),
                             y= butter_bandpass.signal_highpass_filter(
        ecg_sample_complex,cutoff=1,order=5),
                            name='highpass filtered - cutoff 1Hz'))
    fig.add_trace(go.Scatter(x=np.arange(len(ecg_sample_complex)),
                             y= butter_bandpass.signal_highpass_filter(
        ecg_sample_complex,cutoff=0.8,order=5),
                            name='highpass filtered - cutoff 0.8Hz'))
    fig.add_trace(go.Scatter(x=np.arange(len(ecg_sample_complex)),
                             y= butter_bandpass.signal_highpass_filter(
        ecg_sample_complex,cutoff=0.6,order=5),
                            name='highpass filtered - cutoff 0.6Hz'))
    #fig.show()
    fig


.. GENERATED FROM PYTHON SOURCE LINES 395-415

.. code-block:: default
   :lineno-start: 396


    fig = go.Figure()
    fig.add_trace(go.Scatter(x=np.arange(len(ppg_sample_complex)),
                             y= ppg_sample_complex,
                             name='original signal'))
    fig.add_trace(go.Scatter(x=np.arange(len(ppg_sample_complex)),
                             y= butter_bandpass.signal_highpass_filter(
        ppg_sample_complex,cutoff=1,order=5),
                            name='highpass filtered - cutoff 1Hz'))
    fig.add_trace(go.Scatter(x=np.arange(len(ppg_sample_complex)),
                             y= butter_bandpass.signal_highpass_filter(
        ppg_sample_complex,cutoff=0.8,order=5),
                            name='highpass filtered - cutoff 0.8Hz'))
    fig.add_trace(go.Scatter(x=np.arange(len(ppg_sample_complex)),
                             y= butter_bandpass.signal_highpass_filter(
        ppg_sample_complex,cutoff=0.6,order=5),
                            name='highpass filtered - cutoff 0.6Hz'))
    #fig.show()
    fig


.. GENERATED FROM PYTHON SOURCE LINES 416-435

.. code-block:: default
   :lineno-start: 417


    fig = go.Figure()
    fig.add_trace(go.Scatter(x=np.arange(len(ecg_sample_complex)),
                             y= ecg_sample_complex,name='original signal'))
    fig.add_trace(go.Scatter(x=np.arange(len(ecg_sample_complex)),
                             y= butter_bandpass.signal_highpass_filter(
        ecg_sample_complex,cutoff=1,order=5)
                             ,name='butterworth highpass'))
    fig.add_trace(go.Scatter(x=np.arange(len(ecg_sample_complex)),
                             y= cheby_bandpass.signal_highpass_filter(
        ecg_sample_complex,cutoff=1,order=5)
                            ,name='chebyshev highpass'))
    fig.add_trace(go.Scatter(x=np.arange(len(ecg_sample_complex)),
                             y= ellip_bandpass.signal_highpass_filter(
        ecg_sample_complex,cutoff=1,order=5)
                            ,name='elliptic highpass'))
    #fig.show()
    fig


.. GENERATED FROM PYTHON SOURCE LINES 436-453

.. code-block:: default
   :lineno-start: 437


    fig = go.Figure()
    fig.add_trace(go.Scatter(x=np.arange(len(ppg_sample_complex)),
                             y= ppg_sample_complex,name='original signal'))
    fig.add_trace(go.Scatter(x=np.arange(len(ppg_sample_complex)),
                             y= butter_bandpass.signal_highpass_filter(
        ppg_sample_complex,cutoff=1,order=5)
                             ,name='butterworth highpass'))
    fig.add_trace(go.Scatter(x=np.arange(len(ecg_sample_complex)),
                             y= cheby_bandpass.signal_highpass_filter(
        ppg_sample_complex,cutoff=1,order=5)
                            ,name='chebyshev highpass'))
    fig.add_trace(go.Scatter(x=np.arange(len(ecg_sample_complex)),
                             y= ellip_bandpass.signal_highpass_filter(
        ppg_sample_complex,cutoff=1,order=5)
                            ,name='elliptic highpass'))
    #fig.show()
    fig

.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.509 seconds)


.. _sphx_glr_download__examples_raw_plot_preprocess_signals.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_preprocess_signals.py <plot_preprocess_signals.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_preprocess_signals.ipynb <plot_preprocess_signals.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
