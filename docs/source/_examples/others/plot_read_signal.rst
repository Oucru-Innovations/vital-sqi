
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples/others/plot_read_signal.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_others_plot_read_signal.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_others_plot_read_signal.py:


Exploiting pandas!!
=====================

This example....

See more notes at the end.

.. GENERATED FROM PYTHON SOURCE LINES 11-13

Load data
----------

.. GENERATED FROM PYTHON SOURCE LINES 13-49

.. code-block:: default
   :lineno-start: 14


    # Generic
    import os
    import numpy as np
    import pandas as pd
    import matplotlib.pyplot as plt

    # Scipy
    from scipy.stats import skew
    from scipy.stats import kurtosis

    # vitalSQI
    from vital_sqi.data.signal_io import ECG_reader
    from vital_sqi.dataset import load_ppg, load_ecg

    # ----------------------------
    # Load data
    # ----------------------------
    # Filepath
    filepath = '../../tests/test_data'
    filename = 'example.edf'

    # Load
    data = ECG_reader(os.path.join(filepath, filename), 'edf')
    # data = load_ecg()

    # The attributes!
    print(data)
    print(data.signals)
    print(data.sampling_rate)
    print(data.wave_type)
    print(data.sqis)
    print(data.info)







.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Reading Channels:   0%|          | 0/2 [00:00<?, ?it/s]    Reading Channels: 100%|##########| 2/2 [00:00<00:00, 35.54it/s]
    <vital_sqi.data.signal_sqi_class.SignalSQI object at 0x7f8eac429590>
                              timestamps             0            1
    0      2019-01-21 18:04:13.000000000 -13675.252155 -7651.251911
    1      2019-01-21 18:04:13.003906250  -1351.679835   191.522423
    2      2019-01-21 18:04:13.007812500  12283.614405  9414.911635
    3      2019-01-21 18:04:13.011718750  10867.175189  7609.916136
    4      2019-01-21 18:04:13.015625000  -2296.891218 -2713.004685
    ...                              ...           ...          ...
    265531 2019-01-21 18:21:30.230468750   2872.836347     1.377859
    265532 2019-01-21 18:21:30.234375000   6587.544640     1.377859
    265533 2019-01-21 18:21:30.238281250   7298.519966     1.377859
    265534 2019-01-21 18:21:30.242187500   7838.640757     1.377859
    265535 2019-01-21 18:21:30.246093750   9784.177890     1.377859

    [265536 rows x 3 columns]
    256
    ecg
    None
    [{'technician': '', 'recording_additional': '', 'patientname': 'NN', 'patient_additional': '', 'patientcode': 'Sensor: <NONE>, Device Type:', 'equipment': 'Recording', 'admincode': '24H-Electrode', 'gender': '', 'startdate': datetime.datetime(2019, 1, 22, 1, 4, 13), 'birthdate': '', 'annotations': [[1037.578, b'0.000000', 'Electrode Removed']]}, [{'label': 'ECG Channel 1', 'dimension': 'uV', 'sample_rate': 256, 'physical_max': 90298.0, 'physical_min': -90298.0, 'digital_max': 32767, 'digital_min': -32768, 'prefilter': '', 'transducer': ''}, {'label': 'ECG Channel 2', 'dimension': 'uV', 'sample_rate': 256, 'physical_max': 90298.0, 'physical_min': -90298.0, 'digital_max': 32767, 'digital_min': -32768, 'prefilter': '', 'transducer': ''}]]




.. GENERATED FROM PYTHON SOURCE LINES 50-52

Formatting
----------

.. GENERATED FROM PYTHON SOURCE LINES 52-105

.. code-block:: default
   :lineno-start: 54



    # ----------------------------
    # Pandas
    # ----------------------------
    # Questions:
    # Could we exploit pandas?
    # Will it have any limitation?

    # Display (shows timedelta aligned)
    pd.Timedelta.__str__ = lambda x: x._repr_base('all')

    # ----------------------
    # Format data
    # ----------------------
    # Load DataFrame
    signals = pd.DataFrame(data.signals)

    # Include column with index
    signals = signals.reset_index()

    # .. note: We are assuming that the data signals index has been
    #          recorded every fs no matter whether the patient moved,
    #          the device was disconnected and connected again, ...
    # Create timedelta
    signals['timedelta'] = \
        pd.to_timedelta(signals.index / data.sampling_rate, unit='s')

    # Create datetimes (if needed)
    #signals['date'] = pd.to_datetime(data.start_datetime)
    #signals['date']+= pd.to_timedelta(signals.timedelta)

    # Set the timedelta index (keep numeric index too)
    signals = signals.set_index('timedelta')

    # Rename column to avoid confusion
    signals = signals.rename(columns={'index': 'idx'})

    # Show
    print("\nSignals:")
    print(signals)

    # Plot
    fig, axes = plt.subplots(nrows=2, ncols=1)
    axes = axes.flatten()

    signals[0].plot(ax=axes[0])
    signals[1].plot(ax=axes[1])








.. image-sg:: /_examples/others/images/sphx_glr_plot_read_signal_001.png
   :alt: plot read signal
   :srcset: /_examples/others/images/sphx_glr_plot_read_signal_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Signals:
                                  idx                    timestamps             0            1
    timedelta                                                                                 
    0 days 00:00:00                 0 2019-01-21 18:04:13.000000000 -13675.252155 -7651.251911
    0 days 00:00:00.003906250       1 2019-01-21 18:04:13.003906250  -1351.679835   191.522423
    0 days 00:00:00.007812500       2 2019-01-21 18:04:13.007812500  12283.614405  9414.911635
    0 days 00:00:00.011718750       3 2019-01-21 18:04:13.011718750  10867.175189  7609.916136
    0 days 00:00:00.015625          4 2019-01-21 18:04:13.015625000  -2296.891218 -2713.004685
    ...                           ...                           ...           ...          ...
    0 days 00:17:17.230468750  265531 2019-01-21 18:21:30.230468750   2872.836347     1.377859
    0 days 00:17:17.234375     265532 2019-01-21 18:21:30.234375000   6587.544640     1.377859
    0 days 00:17:17.238281250  265533 2019-01-21 18:21:30.238281250   7298.519966     1.377859
    0 days 00:17:17.242187500  265534 2019-01-21 18:21:30.242187500   7838.640757     1.377859
    0 days 00:17:17.246093750  265535 2019-01-21 18:21:30.246093750   9784.177890     1.377859

    [265536 rows x 4 columns]

    <AxesSubplot:xlabel='timedelta'>



.. GENERATED FROM PYTHON SOURCE LINES 106-108

Preprocessing
-------------

.. GENERATED FROM PYTHON SOURCE LINES 110-111

Lets trim the first/last 5 minutes

.. GENERATED FROM PYTHON SOURCE LINES 111-125

.. code-block:: default
   :lineno-start: 112


    # -------------------------
    # Trim first/last 5 minutes
    # -------------------------
    # Offset
    offset = pd.Timedelta(minutes=5)

    # Indexes
    idxs = (signals.index > offset) & \
           (signals.index < signals.index[-1] - offset)

    # Filter
    signals = signals[idxs]








.. GENERATED FROM PYTHON SOURCE LINES 126-127

Lets resample the data

.. GENERATED FROM PYTHON SOURCE LINES 127-130

.. code-block:: default
   :lineno-start: 128


    # Implement!








.. GENERATED FROM PYTHON SOURCE LINES 131-132

Lets imput missing data

.. GENERATED FROM PYTHON SOURCE LINES 132-135

.. code-block:: default
   :lineno-start: 133


    # Implement!








.. GENERATED FROM PYTHON SOURCE LINES 136-137

Lets do tappering??

.. GENERATED FROM PYTHON SOURCE LINES 137-140

.. code-block:: default
   :lineno-start: 138


    # Implement!








.. GENERATED FROM PYTHON SOURCE LINES 141-142

Lets show the preprocessed signals

.. GENERATED FROM PYTHON SOURCE LINES 142-151

.. code-block:: default
   :lineno-start: 143


    # Show
    print("\nPreprocessing:")
    print(signals)









.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Preprocessing:
                                  idx                    timestamps           0           1
    timedelta                                                                              
    0 days 00:05:00.003906250   76801 2019-01-21 18:09:13.003906250 -957.612116 -621.414481
    0 days 00:05:00.007812500   76802 2019-01-21 18:09:13.007812500 -855.650538 -566.300114
    0 days 00:05:00.011718750   76803 2019-01-21 18:09:13.011718750 -682.040284 -458.827100
    0 days 00:05:00.015625      76804 2019-01-21 18:09:13.015625000 -298.995438 -260.415381
    0 days 00:05:00.019531250   76805 2019-01-21 18:09:13.019531250 -180.499550 -197.033860
    ...                           ...                           ...         ...         ...
    0 days 00:12:17.226562500  188730 2019-01-21 18:16:30.226562500 -183.255268 -166.720958
    0 days 00:12:17.230468750  188731 2019-01-21 18:16:30.230468750 -139.163775 -161.209522
    0 days 00:12:17.234375     188732 2019-01-21 18:16:30.234375000  -42.713634 -144.675212
    0 days 00:12:17.238281250  188733 2019-01-21 18:16:30.238281250    6.889296 -130.896620
    0 days 00:12:17.242187500  188734 2019-01-21 18:16:30.242187500  -26.179324 -133.652338

    [111934 rows x 4 columns]




.. GENERATED FROM PYTHON SOURCE LINES 152-154

Compute SQIs
------------

.. GENERATED FROM PYTHON SOURCE LINES 156-157

Lets first see how the windows look like

.. GENERATED FROM PYTHON SOURCE LINES 157-161

.. code-block:: default
   :lineno-start: 158


    # Implement!









.. GENERATED FROM PYTHON SOURCE LINES 162-168

Lets define our own SQI function.

.. note: This should be the real focus and strength of this
         package, to have a series of sqi techniques very
         easy to compute. Also it would be great if they can
         be made compatible with pandas.

.. GENERATED FROM PYTHON SOURCE LINES 168-181

.. code-block:: default
   :lineno-start: 168

    def own(x):
        return np.random.randint(100)

    # .. note: What if it is a complex SQI that requires first
    #          to compute the peaks and then apply some numpy
    #          functions?

    # from vital_sqi.sqi.standard_sqi import msq_sqi

    # The msq_sqi uses a PeakDetector (although at the moment
    # it is missing the library so it breaks). When included,
    # it raises a weird warning but returns a value.








.. GENERATED FROM PYTHON SOURCE LINES 182-183

Lets compute the SQIs

.. GENERATED FROM PYTHON SOURCE LINES 183-206

.. code-block:: default
   :lineno-start: 184


    # ---------------------
    # Compute SQIs
    # ---------------------
    # Group by 30s segments
    sqis = signals \
        .groupby(pd.Grouper(freq='30s')) \
        .agg({'idx': ['first', 'last'],
              0: [skew, kurtosis, own],
              1: [skew, kurtosis, own]})


    # .. note: We are assuming that the whole signal has been
    #          read in one chunk. This will not work if using
    #          batches, will window ids be necessary?
    # Add window id (if needed)
    sqis['w'] = np.arange(sqis.shape[0])

    # Show
    print("\nSQIs (all):")
    #print(sqis)
    sqis





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    SQIs (all):


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead tr th {
            text-align: left;
        }

        .dataframe thead tr:last-of-type th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr>
          <th></th>
          <th colspan="2" halign="left">idx</th>
          <th colspan="3" halign="left">0</th>
          <th colspan="3" halign="left">1</th>
          <th>w</th>
        </tr>
        <tr>
          <th></th>
          <th>first</th>
          <th>last</th>
          <th>skew</th>
          <th>kurtosis</th>
          <th>own</th>
          <th>skew</th>
          <th>kurtosis</th>
          <th>own</th>
          <th></th>
        </tr>
        <tr>
          <th>timedelta</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0 days 00:05:00.003906250</th>
          <td>76801</td>
          <td>84480</td>
          <td>-2.611186</td>
          <td>8.915232</td>
          <td>85.0</td>
          <td>-2.053143</td>
          <td>6.553518</td>
          <td>28.0</td>
          <td>0</td>
        </tr>
        <tr>
          <th>0 days 00:05:30.003906250</th>
          <td>84481</td>
          <td>92160</td>
          <td>-2.901139</td>
          <td>10.177533</td>
          <td>63.0</td>
          <td>-2.760345</td>
          <td>9.186591</td>
          <td>42.0</td>
          <td>1</td>
        </tr>
        <tr>
          <th>0 days 00:06:00.003906250</th>
          <td>92161</td>
          <td>99840</td>
          <td>-2.899841</td>
          <td>10.183644</td>
          <td>97.0</td>
          <td>-2.731843</td>
          <td>9.057704</td>
          <td>76.0</td>
          <td>2</td>
        </tr>
        <tr>
          <th>0 days 00:06:30.003906250</th>
          <td>99841</td>
          <td>107520</td>
          <td>-2.914280</td>
          <td>10.256661</td>
          <td>99.0</td>
          <td>-2.776291</td>
          <td>9.266096</td>
          <td>52.0</td>
          <td>3</td>
        </tr>
        <tr>
          <th>0 days 00:07:00.003906250</th>
          <td>107521</td>
          <td>115200</td>
          <td>-2.923627</td>
          <td>10.302557</td>
          <td>45.0</td>
          <td>-2.787524</td>
          <td>9.320668</td>
          <td>60.0</td>
          <td>4</td>
        </tr>
        <tr>
          <th>0 days 00:07:30.003906250</th>
          <td>115201</td>
          <td>122880</td>
          <td>-2.922589</td>
          <td>10.271318</td>
          <td>74.0</td>
          <td>-2.792372</td>
          <td>9.322571</td>
          <td>43.0</td>
          <td>5</td>
        </tr>
        <tr>
          <th>0 days 00:08:00.003906250</th>
          <td>122881</td>
          <td>130560</td>
          <td>-2.930931</td>
          <td>10.357501</td>
          <td>73.0</td>
          <td>-2.796698</td>
          <td>9.378391</td>
          <td>10.0</td>
          <td>6</td>
        </tr>
        <tr>
          <th>0 days 00:08:30.003906250</th>
          <td>130561</td>
          <td>138240</td>
          <td>-2.925471</td>
          <td>10.315848</td>
          <td>14.0</td>
          <td>-2.793041</td>
          <td>9.361877</td>
          <td>22.0</td>
          <td>7</td>
        </tr>
        <tr>
          <th>0 days 00:09:00.003906250</th>
          <td>138241</td>
          <td>145920</td>
          <td>-2.636403</td>
          <td>8.985950</td>
          <td>91.0</td>
          <td>-2.240398</td>
          <td>6.893264</td>
          <td>59.0</td>
          <td>8</td>
        </tr>
        <tr>
          <th>0 days 00:09:30.003906250</th>
          <td>145921</td>
          <td>153600</td>
          <td>-2.858862</td>
          <td>10.012735</td>
          <td>88.0</td>
          <td>-2.568790</td>
          <td>8.354304</td>
          <td>95.0</td>
          <td>9</td>
        </tr>
        <tr>
          <th>0 days 00:10:00.003906250</th>
          <td>153601</td>
          <td>161280</td>
          <td>-2.929460</td>
          <td>10.335216</td>
          <td>92.0</td>
          <td>-2.773964</td>
          <td>9.259591</td>
          <td>9.0</td>
          <td>10</td>
        </tr>
        <tr>
          <th>0 days 00:10:30.003906250</th>
          <td>161281</td>
          <td>168960</td>
          <td>-2.922194</td>
          <td>10.292093</td>
          <td>50.0</td>
          <td>-2.763648</td>
          <td>9.210560</td>
          <td>5.0</td>
          <td>11</td>
        </tr>
        <tr>
          <th>0 days 00:11:00.003906250</th>
          <td>168961</td>
          <td>176640</td>
          <td>-2.908410</td>
          <td>10.121085</td>
          <td>39.0</td>
          <td>-2.735254</td>
          <td>8.983923</td>
          <td>64.0</td>
          <td>12</td>
        </tr>
        <tr>
          <th>0 days 00:11:30.003906250</th>
          <td>176641</td>
          <td>184320</td>
          <td>-6.475209</td>
          <td>63.260897</td>
          <td>97.0</td>
          <td>-9.979058</td>
          <td>149.923050</td>
          <td>73.0</td>
          <td>13</td>
        </tr>
        <tr>
          <th>0 days 00:12:00.003906250</th>
          <td>184321</td>
          <td>188734</td>
          <td>4.415647</td>
          <td>55.351198</td>
          <td>88.0</td>
          <td>4.867658</td>
          <td>58.754922</td>
          <td>11.0</td>
          <td>14</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 207-208

Lets apply some signal quality rules

.. GENERATED FROM PYTHON SOURCE LINES 208-239

.. code-block:: default
   :lineno-start: 209


    # ---------------------
    # Apply SQI Rules
    # ---------------------

    # Apply random rule
    sqis['keep'] = np.random.choice(a=[False, True], size=(sqis.shape[0],))

    # Create basic rule
    criteria = list(zip(*[
        (sqis[0]['skew'].between(-2.9, -2.6), True),
        (sqis[0]['skew'].between(4, 5), True)
    ]))

    # Apply rule (default False)
    sqis['keep'] = np.select(criteria[0], criteria[1], False)

    # Keep all
    #sqis['keep'] = True

    # Keep only valid
    sqis = sqis[sqis.keep]

    # Show
    print("\nSQIs (valid):")
    sqis









.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    SQIs (valid):


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead tr th {
            text-align: left;
        }

        .dataframe thead tr:last-of-type th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr>
          <th></th>
          <th colspan="2" halign="left">idx</th>
          <th colspan="3" halign="left">0</th>
          <th colspan="3" halign="left">1</th>
          <th>w</th>
          <th>keep</th>
        </tr>
        <tr>
          <th></th>
          <th>first</th>
          <th>last</th>
          <th>skew</th>
          <th>kurtosis</th>
          <th>own</th>
          <th>skew</th>
          <th>kurtosis</th>
          <th>own</th>
          <th></th>
          <th></th>
        </tr>
        <tr>
          <th>timedelta</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0 days 00:05:00.003906250</th>
          <td>76801</td>
          <td>84480</td>
          <td>-2.611186</td>
          <td>8.915232</td>
          <td>85.0</td>
          <td>-2.053143</td>
          <td>6.553518</td>
          <td>28.0</td>
          <td>0</td>
          <td>True</td>
        </tr>
        <tr>
          <th>0 days 00:06:00.003906250</th>
          <td>92161</td>
          <td>99840</td>
          <td>-2.899841</td>
          <td>10.183644</td>
          <td>97.0</td>
          <td>-2.731843</td>
          <td>9.057704</td>
          <td>76.0</td>
          <td>2</td>
          <td>True</td>
        </tr>
        <tr>
          <th>0 days 00:09:00.003906250</th>
          <td>138241</td>
          <td>145920</td>
          <td>-2.636403</td>
          <td>8.985950</td>
          <td>91.0</td>
          <td>-2.240398</td>
          <td>6.893264</td>
          <td>59.0</td>
          <td>8</td>
          <td>True</td>
        </tr>
        <tr>
          <th>0 days 00:09:30.003906250</th>
          <td>145921</td>
          <td>153600</td>
          <td>-2.858862</td>
          <td>10.012735</td>
          <td>88.0</td>
          <td>-2.568790</td>
          <td>8.354304</td>
          <td>95.0</td>
          <td>9</td>
          <td>True</td>
        </tr>
        <tr>
          <th>0 days 00:12:00.003906250</th>
          <td>184321</td>
          <td>188734</td>
          <td>4.415647</td>
          <td>55.351198</td>
          <td>88.0</td>
          <td>4.867658</td>
          <td>58.754922</td>
          <td>11.0</td>
          <td>14</td>
          <td>True</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 240-243

Lets go back to raw data
------------------------


.. GENERATED FROM PYTHON SOURCE LINES 245-246

Lets extract the valid windows from the original signal

.. GENERATED FROM PYTHON SOURCE LINES 246-274

.. code-block:: default
   :lineno-start: 247


    # -------------------------------------
    # Extract windows from original signals
    # -------------------------------------
    # .. note: This might be fragile as it is not really using
    #          the index but the position. Anyways, the index
    #          column is just incremental isn't? Or am I missing
    #          special conditions when this might not happen?
    #
    # .. note: Could it be done more efficiently?
    #
    # .. note: We could include the window ids if needed. This could
    #          help linking the quality indexes stored in sqis.csv
    #          and the valid sections of the signal stored in the
    #          signals.csv file.
    #
    # Keep slices and concatenate
    slices = [signals.iloc[start:stop, :] for start, stop
        in zip(sqis['idx']['first'],  sqis['idx']['last'])]

    # Concatenate only valid sections
    result = pd.concat(slices)

    # Show
    print("\nSignals (for valid sqis)")
    result






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Signals (for valid sqis)


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>idx</th>
          <th>timestamps</th>
          <th>0</th>
          <th>1</th>
        </tr>
        <tr>
          <th>timedelta</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0 days 00:10:00.007812500</th>
          <td>153602</td>
          <td>2019-01-21 18:14:13.007812500</td>
          <td>213.568170</td>
          <td>141.919493</td>
        </tr>
        <tr>
          <th>0 days 00:10:00.011718750</th>
          <td>153603</td>
          <td>2019-01-21 18:14:13.011718750</td>
          <td>213.568170</td>
          <td>144.675212</td>
        </tr>
        <tr>
          <th>0 days 00:10:00.015625</th>
          <td>153604</td>
          <td>2019-01-21 18:14:13.015625000</td>
          <td>205.301015</td>
          <td>133.652338</td>
        </tr>
        <tr>
          <th>0 days 00:10:00.019531250</th>
          <td>153605</td>
          <td>2019-01-21 18:14:13.019531250</td>
          <td>191.522423</td>
          <td>125.385183</td>
        </tr>
        <tr>
          <th>0 days 00:10:00.023437500</th>
          <td>153606</td>
          <td>2019-01-21 18:14:13.023437500</td>
          <td>188.766705</td>
          <td>125.385183</td>
        </tr>
        <tr>
          <th>...</th>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
        </tr>
        <tr>
          <th>0 days 00:11:29.984375</th>
          <td>176636</td>
          <td>2019-01-21 18:15:42.984375000</td>
          <td>17.912169</td>
          <td>9.645014</td>
        </tr>
        <tr>
          <th>0 days 00:11:29.988281250</th>
          <td>176637</td>
          <td>2019-01-21 18:15:42.988281250</td>
          <td>28.935042</td>
          <td>17.912169</td>
        </tr>
        <tr>
          <th>0 days 00:11:29.992187500</th>
          <td>176638</td>
          <td>2019-01-21 18:15:42.992187500</td>
          <td>39.957916</td>
          <td>26.179324</td>
        </tr>
        <tr>
          <th>0 days 00:11:29.996093750</th>
          <td>176639</td>
          <td>2019-01-21 18:15:42.996093750</td>
          <td>39.957916</td>
          <td>23.423606</td>
        </tr>
        <tr>
          <th>0 days 00:11:30</th>
          <td>176640</td>
          <td>2019-01-21 18:15:43.000000000</td>
          <td>39.957916</td>
          <td>23.423606</td>
        </tr>
      </tbody>
    </table>
    <p>15358 rows × 4 columns</p>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 275-276

Lets plot the result

.. GENERATED FROM PYTHON SOURCE LINES 276-291

.. code-block:: default
   :lineno-start: 277


    # Create figure
    fig, axes = plt.subplots(nrows=2, ncols=1)
    axes = axes.flatten()

    # Plot
    result[0].plot(ax=axes[0])
    result[1].plot(ax=axes[1])

    # Adjust layout
    plt.tight_layout()







.. image-sg:: /_examples/others/images/sphx_glr_plot_read_signal_002.png
   :alt: plot read signal
   :srcset: /_examples/others/images/sphx_glr_plot_read_signal_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 292-302

Further analysis (other tutorial)
---------------------------------

Now that we have selected those sections in which the signal
quality is appropriate. We can do further analysis, we can
find the peaks to identify the heart rate, we can describe
the windows statistically, ....




.. GENERATED FROM PYTHON SOURCE LINES 302-328

.. code-block:: default
   :lineno-start: 303


    # Show
    plt.show()



    #
    #.. warning:: Should we use TimeInterval indexes for windows?
    #
    #.. warning:: Generalising rules:
    #
    #             https://stackoverflow.com/questions/50098025/mapping-ranges-of-values-in-pandas-dataframe
    #
    #.. warning:: This is a very basic example and might fail when using
    #             the reading in batches function from pandas. In such
    #             scenario, consider using a map reduce approach, which
    #             should not require many changes anyways.#
    #
    #             https://pythonspeed.com/articles/chunking-pandas/
    #
    #.. warning:: Useful to filter periods in which value is constant,
    #             maybe due to lost of connection or something similar.#
    #
    #             https://stackoverflow.com/questions/55271735/pandas-finding-start-end-values-of-consecutive-indexes-in-a-pandas-dataframe
    #             https://stackoverflow.com/questions/62361446/python-dataframe-get-index-start-and-end-of-successive-values
    #








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.057 seconds)


.. _sphx_glr_download__examples_others_plot_read_signal.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_read_signal.py <plot_read_signal.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_read_signal.ipynb <plot_read_signal.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
