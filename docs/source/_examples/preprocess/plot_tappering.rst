
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples/preprocess/plot_tappering.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_preprocess_plot_tappering.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_preprocess_plot_tappering.py:


Tappering
=========

This example ....

.. GENERATED FROM PYTHON SOURCE LINES 8-75


.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "/Users/haihb/Documents/Oucru/innovation/vital_sqi/examples/preprocess/plot_tappering.py", line 38, in <module>
        tap_zerobaseline_f = preprocess.preprocess_signal.taper_signal(s, shift_min_to_zero=False)
      File "/Users/haihb/miniconda3/envs/sqi/lib/python3.7/site-packages/vital_sqi/preprocess/preprocess_signal.py", line 30, in taper_signal
        check_signal_format(s)
      File "/Users/haihb/miniconda3/envs/sqi/lib/python3.7/site-packages/vital_sqi/common/utils.py", line 380, in check_signal_format
        assert isinstance(s, pd.DataFrame), 'Expected a pd.DataFrame.'
    AssertionError: Expected a pd.DataFrame.






|

.. code-block:: default
   :lineno-start: 9


    # General
    import numpy as np
    import plotly.graph_objects as go
    from plotly.subplots import make_subplots
    from scipy import signal
    import scipy.signal.windows as wd

    # vitalSQI
    from vital_sqi import preprocess

    # -----------------------
    # Load data
    # -----------------------
    # Create samples
    x = np.linspace(-10*np.pi, 10*np.pi, 201)

    # Create signal
    s = np.sin(30*x)

    # Initialize hann windows
    w = list(wd.hann(len(s)))

    # -----------------------
    # Apply
    # -----------------------
    # The tapering data will pin the first and last part at the zero pivot.
    # The remaining will be scale according to the windows format. The default
    # tapering method shifts the segment by the value equal to the minimum value
    # to the zero baseline set shift_min_to_zero=False
    tap_zerobaseline_f = preprocess.preprocess_signal.taper_signal(s, shift_min_to_zero=False)

    # Taper data into the zerobaseline to remove the edge effect

    # Different windows format can be used to perform tapering process
    # window is imported from the scipy package (scipy.signal.window). Default
    # is using Tukey window
    tap_zerobaseline_w = preprocess.preprocess_signal.taper_signal(s, window=w,
                                                  shift_min_to_zero=False)

    # -----------------------
    # Visualize
    # -----------------------
    # Create figure
    fig = make_subplots(rows=4, cols=1,
        subplot_titles=('Original',
                        'w=Tukey, shift=False',
                        'w=Tukey, shift=True'
                        'w=Hann, shift=False'))

    # Add traces
    fig.add_trace(go.Scatter(x=x, y=s, name='original'), row=1, col=1)
    fig.add_trace(go.Scatter(x=x, y=tap_zerobaseline_t, name='w=Tukey, shift=False'), row=2, col=1)
    fig.add_trace(go.Scatter(x=x, y=tap_zerobaseline_f, name='w=Tukey, shift=True'), row=3, col=1)
    fig.add_trace(go.Scatter(x=x, y=tap_zerobaseline_w, name='w=Hann, shift=False'), row=4, col=1)

    # Update layout
    fig.update_layout(#height=600,
                      #width=600,
                      #title_text="Smoothing",
                      legend=dict(
                          orientation="h",
                          yanchor="bottom", y=1.02,
                          xanchor="right", x=1)
                      )

    # Show
    fig

.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.295 seconds)


.. _sphx_glr_download__examples_preprocess_plot_tappering.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_tappering.py <plot_tappering.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_tappering.ipynb <plot_tappering.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
